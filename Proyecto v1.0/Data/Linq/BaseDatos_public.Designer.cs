//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 28/09/2017 14:08:01
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace AulaWebContext_public
{

    [DatabaseAttribute(Name = "Aula_Web")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class AulaWebDataContext_public : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(AulaWebDataContext_public));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertUsuario(Usuario instance);
        partial void UpdateUsuario(Usuario instance);
        partial void DeleteUsuario(Usuario instance);
        partial void InsertArchivoAutor(ArchivoAutor instance);
        partial void UpdateArchivoAutor(ArchivoAutor instance);
        partial void DeleteArchivoAutor(ArchivoAutor instance);
        partial void InsertAutor(Autor instance);
        partial void UpdateAutor(Autor instance);
        partial void DeleteAutor(Autor instance);
        partial void InsertComentario(Comentario instance);
        partial void UpdateComentario(Comentario instance);
        partial void DeleteComentario(Comentario instance);
        partial void InsertPai(Pai instance);
        partial void UpdatePai(Pai instance);
        partial void DeletePai(Pai instance);
        partial void InsertRol(Rol instance);
        partial void UpdateRol(Rol instance);
        partial void DeleteRol(Rol instance);
        partial void InsertSubirDescargar(SubirDescargar instance);
        partial void UpdateSubirDescargar(SubirDescargar instance);
        partial void DeleteSubirDescargar(SubirDescargar instance);
        partial void InsertTag(Tag instance);
        partial void UpdateTag(Tag instance);
        partial void DeleteTag(Tag instance);
        partial void InsertEstado(Estado instance);
        partial void UpdateEstado(Estado instance);
        partial void DeleteEstado(Estado instance);
        partial void InsertArchivo(Archivo instance);
        partial void UpdateArchivo(Archivo instance);
        partial void DeleteArchivo(Archivo instance);
        partial void InsertCategoria(Categoria instance);
        partial void UpdateCategoria(Categoria instance);
        partial void DeleteCategoria(Categoria instance);

        #endregion

        public AulaWebDataContext_public() :
        base(GetConnectionString("AulaWebDataContextConnectionString_public"), mappingSource)
        {
            OnCreated();
        }

        public AulaWebDataContext_public(MappingSource mappingSource) :
        base(GetConnectionString("AulaWebDataContextConnectionString_public"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public AulaWebDataContext_public(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public AulaWebDataContext_public(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public AulaWebDataContext_public(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public AulaWebDataContext_public(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Usuario> Usuarios
        {
            get
            {
                return this.GetTable<Usuario>();
            }
        }

        public Devart.Data.Linq.Table<ArchivoAutor> ArchivoAutors
        {
            get
            {
                return this.GetTable<ArchivoAutor>();
            }
        }

        public Devart.Data.Linq.Table<Autor> Autors
        {
            get
            {
                return this.GetTable<Autor>();
            }
        }

        public Devart.Data.Linq.Table<Comentario> Comentarios
        {
            get
            {
                return this.GetTable<Comentario>();
            }
        }

        public Devart.Data.Linq.Table<Pai> Pais
        {
            get
            {
                return this.GetTable<Pai>();
            }
        }

        public Devart.Data.Linq.Table<Rol> Rols
        {
            get
            {
                return this.GetTable<Rol>();
            }
        }

        public Devart.Data.Linq.Table<SubirDescargar> SubirDescargars
        {
            get
            {
                return this.GetTable<SubirDescargar>();
            }
        }

        public Devart.Data.Linq.Table<Tag> Tags
        {
            get
            {
                return this.GetTable<Tag>();
            }
        }

        public Devart.Data.Linq.Table<Estado> Estados
        {
            get
            {
                return this.GetTable<Estado>();
            }
        }

        public Devart.Data.Linq.Table<Archivo> Archivos
        {
            get
            {
                return this.GetTable<Archivo>();
            }
        }

        public Devart.Data.Linq.Table<Categoria> Categorias
        {
            get
            {
                return this.GetTable<Categoria>();
            }
        }

    
        /// <summary>
        /// Funcion que retorna los datos del archivo, con categoria, precio y autores
        /// </summary>
        [Function(Name=@"public.sp_ver_archivo", IsComposable=true)]
        public System.Linq.IQueryable<SpVerArchivoResult> SpVerArchivo([Parameter(Name="_id_archivo", DbType="INTEGER")] System.Nullable<int> _id_archivo)
        {
            return this.CreateMethodCallQuery<SpVerArchivoResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id_archivo);
        }

    
        /// <summary>
        /// Funcion que retorna los comentarios de un archivo
        /// </summary>
        [Function(Name=@"public.sp_consultar_comentarios", IsComposable=true)]
        public System.Linq.IQueryable<SpConsultarComentarioResult> SpConsultarComentario([Parameter(Name="_id_archivo", DbType="INTEGER")] System.Nullable<int> _id_archivo)
        {
            return this.CreateMethodCallQuery<SpConsultarComentarioResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id_archivo);
        }

    
        /// <summary>
        /// Funcion que retorna los datos del autor y la nacionalidad
        /// </summary>
        [Function(Name=@"public.sp_ver_autor", IsComposable=true)]
        public System.Linq.IQueryable<SpVerAutorResult> SpVerAutor([Parameter(Name="_id_autor", DbType="INTEGER")] System.Nullable<int> _id_autor)
        {
            return this.CreateMethodCallQuery<SpVerAutorResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id_autor);
        }

    
        /// <summary>
        /// Funcion que retorna los archivos asociados a un autor
        /// </summary>
        [Function(Name=@"public.sp_ver_archivo_autor", IsComposable=true)]
        public System.Linq.IQueryable<SpVerArchivoAutorResult> SpVerArchivoAutor([Parameter(Name="_id_autor", DbType="INTEGER")] System.Nullable<int> _id_autor)
        {
            return this.CreateMethodCallQuery<SpVerArchivoAutorResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id_autor);
        }

    
        /// <summary>
        /// Funcion que retorna los datos del usuario con el rol
        /// </summary>
        [Function(Name=@"public.sp_reporte_usuarios", IsComposable=true)]
        public System.Nullable<System.Int32> SpReporteUsuario()
        {
            IExecuteResult _SpReporteUsuarioResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((System.Nullable<System.Int32>)(_SpReporteUsuarioResult.ReturnValue));
        }

    
        /// <summary>
        /// Funcion que retorna los datos del archivo, con categoria, precio y username
        /// </summary>
        [Function(Name=@"public.sp_reporte_archivos", IsComposable=true)]
        public System.Linq.IQueryable<SpReporteArchivoResult> SpReporteArchivo()
        {
            return this.CreateMethodCallQuery<SpReporteArchivoResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
        }

    
        /// <summary>
        /// Funcion que retorna los datos del autor, con nacionalidad
        /// </summary>
        [Function(Name=@"public.sp_reporte_autores", IsComposable=true)]
        public System.Linq.IQueryable<SpReporteAutoreResult> SpReporteAutore()
        {
            return this.CreateMethodCallQuery<SpReporteAutoreResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
        }

    
        /// <summary>
        /// Funcion que retorna los archivos no aprobados y dependiendo el rol
        /// </summary>
        [Function(Name=@"public.sp_consulta_archivo_datos", IsComposable=true)]
        public System.Linq.IQueryable<SpConsultaArchivoDatoResult> SpConsultaArchivoDato([Parameter(Name="_id_rol", DbType="INTEGER")] System.Nullable<int> _id_rol)
        {
            return this.CreateMethodCallQuery<SpConsultaArchivoDatoResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id_rol);
        }

    
        /// <summary>
        /// Funcion que retorna los datos del archivo dependiendo el nombre
        /// </summary>
        [Function(Name=@"public.sp_consulta_archivo_nombre", IsComposable=true)]
        public System.Linq.IQueryable<Archivo> SpConsultaArchivoNombre([Parameter(Name="_nombre", DbType="CHARACTER VARYING")] string _nombre)
        {
            return this.CreateMethodCallQuery<Archivo>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _nombre);
        }

    
        /// <summary>
        /// Funcion que retorna los datos del autor dependiendo el nombre
        /// </summary>
        [Function(Name=@"public.sp_consulta_autor", IsComposable=true)]
        public System.Linq.IQueryable<Autor> SpConsultaAutor([Parameter(Name="_nom_autor", DbType="CHARACTER VARYING")] string _nom_autor)
        {
            return this.CreateMethodCallQuery<Autor>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _nom_autor);
        }

    
        /// <summary>
        /// Funcion que retorna los datos de la categoria dependiendo el nombre
        /// </summary>
        [Function(Name=@"public.sp_consulta_categoria", IsComposable=true)]
        public System.Linq.IQueryable<Categoria> SpConsultaCategoria([Parameter(Name="_categoria", DbType="CHARACTER VARYING")] string _categoria)
        {
            return this.CreateMethodCallQuery<Categoria>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _categoria);
        }

    
        /// <summary>
        /// Funcion que retorna los datos del usuario dependiendo el correo
        /// </summary>
        [Function(Name=@"public.sp_consulta_correo", IsComposable=true)]
        public System.Linq.IQueryable<Usuario> SpConsultaCorreo([Parameter(Name="_correo", DbType="CHARACTER VARYING")] string _correo)
        {
            return this.CreateMethodCallQuery<Usuario>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _correo);
        }

    
        /// <summary>
        /// Funcion que retorna los datos del usuario dependiendo el documento
        /// </summary>
        [Function(Name=@"public.sp_consulta_documento", IsComposable=true)]
        public System.Linq.IQueryable<Usuario> SpConsultaDocumento([Parameter(Name="_documento", DbType="BIGINT")] System.Nullable<long> _documento)
        {
            return this.CreateMethodCallQuery<Usuario>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _documento);
        }

    
        /// <summary>
        /// Funcion que retorna los usuarios asociados a un rol
        /// </summary>
        [Function(Name=@"public.sp_consulta_rol", IsComposable=true)]
        public System.Linq.IQueryable<Usuario> SpConsultaRol([Parameter(Name="_rol", DbType="INTEGER")] System.Nullable<int> _rol)
        {
            return this.CreateMethodCallQuery<Usuario>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _rol);
        }

    
        /// <summary>
        /// Funcion que retorna los datos de un tag dependiendo el nombre
        /// </summary>
        [Function(Name=@"public.sp_consulta_tags", IsComposable=true)]
        public System.Linq.IQueryable<Tag> SpConsultaTag([Parameter(Name="_tag", DbType="CHARACTER VARYING")] string _tag)
        {
            return this.CreateMethodCallQuery<Tag>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _tag);
        }

    
        /// <summary>
        /// Funcion que retorna los datos del usuario dependiendo el username
        /// </summary>
        [Function(Name=@"public.sp_consulta_usuario", IsComposable=true)]
        public System.Linq.IQueryable<Usuario> SpConsultaUsuario([Parameter(Name="_usuario", DbType="CHARACTER VARYING")] string _usuario)
        {
            return this.CreateMethodCallQuery<Usuario>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _usuario);
        }

    
        /// <summary>
        /// Funcion que retorna un archivo dependiendo un parametro y que este aprobado (2)
        /// </summary>
        [Function(Name=@"public.sp_consultar_archivos", IsComposable=true)]
        public System.Linq.IQueryable<SpConsultarArchivoResult> SpConsultarArchivo([Parameter(Name="_parametro", DbType="CHARACTER VARYING")] string _parametro)
        {
            return this.CreateMethodCallQuery<SpConsultarArchivoResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _parametro);
        }

    
        /// <summary>
        /// Funcion que retorna los datos de usuario dependiendo user y clave
        /// </summary>
        [Function(Name=@"public.sp_loggin_usuario", IsComposable=true)]
        public System.Linq.IQueryable<Usuario> SpLogginUsuario([Parameter(Name="_user", DbType="CHARACTER VARYING")] string _user, [Parameter(Name="_password", DbType="CHARACTER VARYING")] string _password)
        {
            return this.CreateMethodCallQuery<Usuario>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _user, _password);
        }

    
        /// <summary>
        /// Funcion que retorna todos los archivos
        /// </summary>
        [Function(Name=@"public.sp_mostrar_archivo", IsComposable=true)]
        public System.Linq.IQueryable<Archivo> SpMostrarArchivo()
        {
            return this.CreateMethodCallQuery<Archivo>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
        }

    
        /// <summary>
        /// Funcion que retorna todos los archivos y la categoria dependiendo si estan aprobados (2)
        /// </summary>
        [Function(Name=@"public.sp_mostrar_archivos", IsComposable=true)]
        public System.Linq.IQueryable<SpConsultarArchivoResult> SpMostrarArchivo1()
        {
            return this.CreateMethodCallQuery<SpConsultarArchivoResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
        }

    
        /// <summary>
        /// Funcion que retorna todos los autores
        /// </summary>
        [Function(Name=@"public.sp_mostrar_autor", IsComposable=true)]
        public System.Linq.IQueryable<Autor> SpMostrarAutor()
        {
            return this.CreateMethodCallQuery<Autor>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
        }

    
        /// <summary>
        /// Funcion que retorna las categorias
        /// </summary>
        [Function(Name=@"public.sp_mostrar_categoria", IsComposable=true)]
        public System.Linq.IQueryable<Categoria> SpMostrarCategoria()
        {
            return this.CreateMethodCallQuery<Categoria>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
        }

    
        /// <summary>
        /// Funcion que retorna todas las categorias
        /// </summary>
        [Function(Name=@"public.sp_mostrar_categoria_archivo", IsComposable=true)]
        public System.Linq.IQueryable<Categoria> SpMostrarCategoriaArchivo()
        {
            return this.CreateMethodCallQuery<Categoria>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
        }

    
        /// <summary>
        /// Funcion que retorna todos los paises
        /// </summary>
        [Function(Name=@"public.sp_mostrar_pais", IsComposable=true)]
        public System.Linq.IQueryable<Pai> SpMostrarPai()
        {
            return this.CreateMethodCallQuery<Pai>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
        }

    
        /// <summary>
        /// Funcion que retorna todos los tags
        /// </summary>
        [Function(Name=@"public.sp_mostrar_tags", IsComposable=true)]
        public System.Linq.IQueryable<Tag> SpMostrarTag()
        {
            return this.CreateMethodCallQuery<Tag>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
        }

    
        /// <summary>
        /// Funcion que cambia el estado, categoria de un archivo y agrega dinero a la cuenta del user
        /// </summary>
        [Function(Name=@"public.sp_aprobar_archivo")]
        public void SpAprobarArchivo([Parameter(Name="_id_archivo", DbType="INTEGER")] System.Nullable<int> _id_archivo, [Parameter(Name="_id_categoria", DbType="INTEGER")] System.Nullable<int> _id_categoria, [Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_dinero", DbType="INTEGER")] System.Nullable<int> _dinero, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _SpAprobarArchivoResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id_archivo, _id_categoria, _id, _dinero, _user_cambio);
        }

    
        /// <summary>
        /// Funcion que cambia el rol de un user
        /// </summary>
        [Function(Name=@"public.sp_cambiar_rol", IsComposable=true)]
        public System.Linq.IQueryable<Usuario> SpCambiarRol([Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_nombre", DbType="CHARACTER VARYING")] string _nombre, [Parameter(Name="_apellido", DbType="CHARACTER VARYING")] string _apellido, [Parameter(Name="_documento", DbType="BIGINT")] System.Nullable<long> _documento, [Parameter(Name="_telefono", DbType="CHARACTER VARYING")] string _telefono, [Parameter(Name="_correo", DbType="CHARACTER VARYING")] string _correo, [Parameter(Name="_user", DbType="CHARACTER VARYING")] string _user, [Parameter(Name="_clave", DbType="CHARACTER VARYING")] string _clave, [Parameter(Name="_dinero", DbType="INTEGER")] System.Nullable<int> _dinero, [Parameter(Name="_id_rol", DbType="INTEGER")] System.Nullable<int> _id_rol, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            return this.CreateMethodCallQuery<Usuario>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id, _nombre, _apellido, _documento, _telefono, _correo, _user, _clave, _dinero, _id_rol, _user_cambio);
        }

    
        /// <summary>
        /// Funcion que modifica la IP/MAC cuando el usuario cierra session
        /// </summary>
        [Function(Name=@"public.sp_cerrar_session", IsComposable=true)]
        public System.Linq.IQueryable<Usuario> SpCerrarSession([Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            return this.CreateMethodCallQuery<Usuario>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id, _user_cambio);
        }

    
        /// <summary>
        /// Funcion que actualiza el saldo del usuario cuando descarga un archivo
        /// </summary>
        [Function(Name=@"public.sp_descargar_archivo")]
        public void SpDescargarArchivo([Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_dinero", DbType="INTEGER")] System.Nullable<int> _dinero, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _SpDescargarArchivoResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id, _dinero, _user_cambio);
        }

    
        /// <summary>
        /// Funcion que elimina un archivo y su relacion con autor
        /// </summary>
        [Function(Name=@"public.sp_eliminar_archivo")]
        public void SpEliminarArchivo([Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _SpEliminarArchivoResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id, _user_cambio);
        }

    
        /// <summary>
        /// Funcion que elimina una categoria y la relacion con archivo actualizando estado
        /// </summary>
        [Function(Name=@"public.sp_eliminar_categoria", IsComposable=true)]
        public System.Linq.IQueryable<Categoria> SpEliminarCategoria([Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            return this.CreateMethodCallQuery<Categoria>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id, _user_cambio);
        }

    
        /// <summary>
        /// Funcion que elimina un tag
        /// </summary>
        [Function(Name=@"public.sp_eliminar_tags", IsComposable=true)]
        public System.Linq.IQueryable<Tag> SpEliminarTag([Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            return this.CreateMethodCallQuery<Tag>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id, _user_cambio);
        }

    
        /// <summary>
        /// Funcion que inserta un archivo y asigna estado dependiendo rol
        /// </summary>
        [Function(Name=@"public.sp_insertar_archivo", IsComposable=true)]
        public System.Nullable<System.Int32> SpInsertarArchivo([Parameter(Name="_id_rol", DbType="INTEGER")] System.Nullable<int> _id_rol, [Parameter(Name="_nombre", DbType="CHARACTER VARYING")] string _nombre, [Parameter(Name="_fecha", DbType="CHARACTER VARYING")] string _fecha, [Parameter(Name="_sinopsis", DbType="CHARACTER VARYING")] string _sinopsis, [Parameter(Name="_num_pag", DbType="INTEGER")] System.Nullable<int> _num_pag, [Parameter(Name="_foto", DbType="TEXT")] string _foto, [Parameter(Name="_link", DbType="TEXT")] string _link, [Parameter(Name="_id_user", DbType="INTEGER")] System.Nullable<int> _id_user, [Parameter(Name="_id_categoria", DbType="INTEGER")] System.Nullable<int> _id_categoria, [Parameter(Name="_tags", DbType="CHARACTER VARYING")] string _tags, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _SpInsertarArchivoResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id_rol, _nombre, _fecha, _sinopsis, _num_pag, _foto, _link, _id_user, _id_categoria, _tags, _user_cambio);
            return ((System.Nullable<System.Int32>)(_SpInsertarArchivoResult.ReturnValue));
        }

    
        /// <summary>
        /// Funcion que crear la relacion entre un archivo y autor
        /// </summary>
        [Function(Name=@"public.sp_insertar_archivo_autor", IsComposable=true)]
        public System.Nullable<System.Int32> SpInsertarArchivoAutor([Parameter(Name="_nombre", DbType="CHARACTER VARYING")] string _nombre, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _SpInsertarArchivoAutorResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _nombre, _user_cambio);
            return ((System.Nullable<System.Int32>)(_SpInsertarArchivoAutorResult.ReturnValue));
        }

    
        /// <summary>
        /// Funcion que inserta un autor
        /// </summary>
        [Function(Name=@"public.sp_insertar_autor", IsComposable=true)]
        public System.Nullable<System.Int32> SpInsertarAutor([Parameter(Name="_nombre", DbType="CHARACTER VARYING")] string _nombre, [Parameter(Name="_fecha_birth", DbType="CHARACTER VARYING")] string _fecha_birth, [Parameter(Name="_fecha_death", DbType="CHARACTER VARYING")] string _fecha_death, [Parameter(Name="_foto", DbType="TEXT")] string _foto, [Parameter(Name="_descripcion", DbType="CHARACTER VARYING")] string _descripcion, [Parameter(Name="_nacionalidad", DbType="INTEGER")] System.Nullable<int> _nacionalidad, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _SpInsertarAutorResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _nombre, _fecha_birth, _fecha_death, _foto, _descripcion, _nacionalidad, _user_cambio);
            return ((System.Nullable<System.Int32>)(_SpInsertarAutorResult.ReturnValue));
        }

    
        /// <summary>
        /// Funcion que inserta una categoria
        /// </summary>
        [Function(Name=@"public.sp_insertar_categoria", IsComposable=true)]
        public System.Nullable<System.Int32> SpInsertarCategoria([Parameter(Name="_categoria", DbType="CHARACTER VARYING")] string _categoria, [Parameter(Name="_precio", DbType="INTEGER")] System.Nullable<int> _precio, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _SpInsertarCategoriaResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _categoria, _precio, _user_cambio);
            return ((System.Nullable<System.Int32>)(_SpInsertarCategoriaResult.ReturnValue));
        }

    
        /// <summary>
        /// Funcion que inserta el comentario de un usuario en un archivo
        /// </summary>
        [Function(Name=@"public.sp_insertar_comentario", IsComposable=true)]
        public System.Nullable<System.Int32> SpInsertarComentario([Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_id_archivo", DbType="INTEGER")] System.Nullable<int> _id_archivo, [Parameter(Name="_comentario", DbType="CHARACTER VARYING")] string _comentario, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _SpInsertarComentarioResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id, _id_archivo, _comentario, _user_cambio);
            return ((System.Nullable<System.Int32>)(_SpInsertarComentarioResult.ReturnValue));
        }

    
        /// <summary>
        /// Funcion que inserta la IP/MAC cuando el usuario inicia session
        /// </summary>
        [Function(Name=@"public.sp_insertar_ip_mac", IsComposable=true)]
        public System.Linq.IQueryable<Usuario> SpInsertarIpMac([Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_ip", DbType="CHARACTER VARYING")] string _ip, [Parameter(Name="_mac", DbType="CHARACTER VARYING")] string _mac, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            return this.CreateMethodCallQuery<Usuario>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id, _ip, _mac, _user_cambio);
        }

    
        /// <summary>
        /// Funcion que inserta la transaccion realizada sobre un archivo Upload/Download
        /// </summary>
        [Function(Name=@"public.sp_insertar_subir_descargar", IsComposable=true)]
        public System.Nullable<System.Int32> SpInsertarSubirDescargar([Parameter(Name="_id_user", DbType="INTEGER")] System.Nullable<int> _id_user, [Parameter(Name="_id_archivo", DbType="INTEGER")] System.Nullable<int> _id_archivo, [Parameter(Name="_concepto", DbType="CHARACTER VARYING")] string _concepto, [Parameter(Name="_precio", DbType="INTEGER")] System.Nullable<int> _precio, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _SpInsertarSubirDescargarResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id_user, _id_archivo, _concepto, _precio, _user_cambio);
            return ((System.Nullable<System.Int32>)(_SpInsertarSubirDescargarResult.ReturnValue));
        }

    
        /// <summary>
        /// Funcion que inserta un tag
        /// </summary>
        [Function(Name=@"public.sp_insertar_tags", IsComposable=true)]
        public System.Nullable<System.Int32> SpInsertarTag([Parameter(Name="_tag", DbType="CHARACTER VARYING")] string _tag, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _SpInsertarTagResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _tag, _user_cambio);
            return ((System.Nullable<System.Int32>)(_SpInsertarTagResult.ReturnValue));
        }

    
        /// <summary>
        /// Funcion que inserta un usuario
        /// </summary>
        [Function(Name=@"public.sp_insertar_usuario", IsComposable=true)]
        public System.Nullable<System.Int32> SpInsertarUsuario([Parameter(Name="_nombre", DbType="CHARACTER VARYING")] string _nombre, [Parameter(Name="_apellido", DbType="CHARACTER VARYING")] string _apellido, [Parameter(Name="_documento", DbType="BIGINT")] System.Nullable<long> _documento, [Parameter(Name="_telefono", DbType="CHARACTER VARYING")] string _telefono, [Parameter(Name="_correo", DbType="CHARACTER VARYING")] string _correo, [Parameter(Name="_user", DbType="CHARACTER VARYING")] string _user, [Parameter(Name="_clave", DbType="CHARACTER VARYING")] string _clave, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _SpInsertarUsuarioResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _nombre, _apellido, _documento, _telefono, _correo, _user, _clave, _user_cambio);
            return ((System.Nullable<System.Int32>)(_SpInsertarUsuarioResult.ReturnValue));
        }

    
        /// <summary>
        /// Funcion que modifica el precio de una categoria
        /// </summary>
        [Function(Name=@"public.sp_modificar_categoria", IsComposable=true)]
        public System.Linq.IQueryable<Categoria> SpModificarCategoria([Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_categoria", DbType="CHARACTER VARYING")] string _categoria, [Parameter(Name="_precio", DbType="INTEGER")] System.Nullable<int> _precio, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            return this.CreateMethodCallQuery<Categoria>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id, _categoria, _precio, _user_cambio);
        }

    
        /// <summary>
        /// There are no comments for PruebaResta in the schema.
        /// </summary>
        [Function(Name=@"public.prueba_resta")]
        public void PruebaResta([Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_dinero", DbType="INTEGER")] System.Nullable<int> _dinero, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _PruebaRestaResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id, _dinero, _user_cambio);
        }

    
        /// <summary>
        /// There are no comments for PruebaSuma in the schema.
        /// </summary>
        [Function(Name=@"public.prueba_suma")]
        public void PruebaSuma([Parameter(Name="_id", DbType="INTEGER")] System.Nullable<int> _id, [Parameter(Name="_dinero", DbType="INTEGER")] System.Nullable<int> _dinero, [Parameter(Name="_user_cambio", DbType="INTEGER")] System.Nullable<int> _user_cambio)
        {
            IExecuteResult _PruebaSumaResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _id, _dinero, _user_cambio);
        }
    }
}

namespace AulaWebContext_public
{

    /// <summary>
    /// Tabla que contiene los datos de los users registrados
    /// </summary>
    [Table(Name = @"public.usuario")]
    public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdUsuario;

        private string _Nombre;

        private string _Apellido;

        private long _Documento;

        private string _Telefono;

        private string _Correo;

        private string _Usuario1;

        private string _Clave;

        private int _Dinero;

        private int _IdRol;

        private string _Ip;

        private string _Mac;

        private System.Nullable<int> _ModifiedBy;

        private System.Nullable<int> _ControlSessiones;
        #pragma warning restore 0649

        private EntityRef<Rol> _Rol;

        private EntitySet<Comentario> _Comentarios;

        private EntitySet<SubirDescargar> _SubirDescargars;

        private EntitySet<Archivo> _Archivos_IdModerador;

        private EntitySet<Archivo> _Archivos_IdUsuario;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdUsuarioChanging(int value);
        partial void OnIdUsuarioChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnApellidoChanging(string value);
        partial void OnApellidoChanged();
        partial void OnDocumentoChanging(long value);
        partial void OnDocumentoChanged();
        partial void OnTelefonoChanging(string value);
        partial void OnTelefonoChanged();
        partial void OnCorreoChanging(string value);
        partial void OnCorreoChanged();
        partial void OnUsuario1Changing(string value);
        partial void OnUsuario1Changed();
        partial void OnClaveChanging(string value);
        partial void OnClaveChanged();
        partial void OnDineroChanging(int value);
        partial void OnDineroChanged();
        partial void OnIdRolChanging(int value);
        partial void OnIdRolChanged();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        partial void OnMacChanging(string value);
        partial void OnMacChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        partial void OnControlSessionesChanging(System.Nullable<int> value);
        partial void OnControlSessionesChanged();
        #endregion

        public Usuario()
        {
            this._Rol  = default(EntityRef<Rol>);
            this._Comentarios = new EntitySet<Comentario>(new Action<Comentario>(this.attach_Comentarios), new Action<Comentario>(this.detach_Comentarios));
            this._SubirDescargars = new EntitySet<SubirDescargar>(new Action<SubirDescargar>(this.attach_SubirDescargars), new Action<SubirDescargar>(this.detach_SubirDescargars));
            this._Archivos_IdModerador = new EntitySet<Archivo>(new Action<Archivo>(this.attach_Archivos_IdModerador), new Action<Archivo>(this.detach_Archivos_IdModerador));
            this._Archivos_IdUsuario = new EntitySet<Archivo>(new Action<Archivo>(this.attach_Archivos_IdUsuario), new Action<Archivo>(this.detach_Archivos_IdUsuario));
            OnCreated();
        }

    
        /// <summary>
        /// representa el identificador de la tabla
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el nombre del user
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el apellido del user
        /// </summary>
        [Column(Name = @"apellido", Storage = "_Apellido", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Apellido
        {
            get
            {
                return this._Apellido;
            }
            set
            {
                if (this._Apellido != value)
                {
                    this.OnApellidoChanging(value);
                    this.SendPropertyChanging("Apellido");
                    this._Apellido = value;
                    this.SendPropertyChanged("Apellido");
                    this.OnApellidoChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el documento del user
        /// </summary>
        [Column(Name = @"documento", Storage = "_Documento", CanBeNull = false, DbType = "INT8 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Documento
        {
            get
            {
                return this._Documento;
            }
            set
            {
                if (this._Documento != value)
                {
                    this.OnDocumentoChanging(value);
                    this.SendPropertyChanging("Documento");
                    this._Documento = value;
                    this.SendPropertyChanged("Documento");
                    this.OnDocumentoChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el numero de contacto del user
        /// </summary>
        [Column(Name = @"telefono", Storage = "_Telefono", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Telefono
        {
            get
            {
                return this._Telefono;
            }
            set
            {
                if (this._Telefono != value)
                {
                    this.OnTelefonoChanging(value);
                    this.SendPropertyChanging("Telefono");
                    this._Telefono = value;
                    this.SendPropertyChanged("Telefono");
                    this.OnTelefonoChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el e-mail de contacto del user
        /// </summary>
        [Column(Name = @"correo", Storage = "_Correo", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Correo
        {
            get
            {
                return this._Correo;
            }
            set
            {
                if (this._Correo != value)
                {
                    this.OnCorreoChanging(value);
                    this.SendPropertyChanging("Correo");
                    this._Correo = value;
                    this.SendPropertyChanged("Correo");
                    this.OnCorreoChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el nickname del usuario en el sistema
        /// </summary>
        [Column(Name = @"usuario", Storage = "_Usuario1", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Usuario1
        {
            get
            {
                return this._Usuario1;
            }
            set
            {
                if (this._Usuario1 != value)
                {
                    this.OnUsuario1Changing(value);
                    this.SendPropertyChanging("Usuario1");
                    this._Usuario1 = value;
                    this.SendPropertyChanged("Usuario1");
                    this.OnUsuario1Changed();
                }
            }
        }

    
        /// <summary>
        /// representa la clave de acceso al sistema
        /// </summary>
        [Column(Name = @"clave", Storage = "_Clave", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Clave
        {
            get
            {
                return this._Clave;
            }
            set
            {
                if (this._Clave != value)
                {
                    this.OnClaveChanging(value);
                    this.SendPropertyChanging("Clave");
                    this._Clave = value;
                    this.SendPropertyChanged("Clave");
                    this.OnClaveChanged();
                }
            }
        }

    
        /// <summary>
        /// representa la cantidad de dinero que posee el user
        /// </summary>
        [Column(Name = @"dinero", Storage = "_Dinero", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Dinero
        {
            get
            {
                return this._Dinero;
            }
            set
            {
                if (this._Dinero != value)
                {
                    this.OnDineroChanging(value);
                    this.SendPropertyChanging("Dinero");
                    this._Dinero = value;
                    this.SendPropertyChanged("Dinero");
                    this.OnDineroChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el identificador del rol del user
        /// </summary>
        [Column(Name = @"id_rol", Storage = "_IdRol", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdRol
        {
            get
            {
                return this._IdRol;
            }
            set
            {
                if (this._IdRol != value)
                {
                    if (this._Rol.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdRolChanging(value);
                    this.SendPropertyChanging("IdRol");
                    this._IdRol = value;
                    this.SendPropertyChanged("IdRol");
                    this.OnIdRolChanged();
                }
            }
        }

    
        /// <summary>
        /// representa la ip desde la cual se accedio al sistema, valor por defecto: sin IP
        /// </summary>
        [Column(Name = @"ip", Storage = "_Ip", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging("Ip");
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

    
        /// <summary>
        /// representa la mac desde donde se accedio al sistema, valor por defecto: sin MAC
        /// </summary>
        [Column(Name = @"mac", Storage = "_Mac", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Mac
        {
            get
            {
                return this._Mac;
            }
            set
            {
                if (this._Mac != value)
                {
                    this.OnMacChanging(value);
                    this.SendPropertyChanging("Mac");
                    this._Mac = value;
                    this.SendPropertyChanged("Mac");
                    this.OnMacChanged();
                }
            }
        }

    
        /// <summary>
        /// Almacena el id del usuario que genera un cambio sobre la fila
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// Almacena la cantidad de intentos que el usuario ingreso su contraseÃ±a. NOTA: mas de intentos 3 erroneos bloqueo de ingreso..
        /// </summary>
        [Column(Name = @"control_sessiones", Storage = "_ControlSessiones", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ControlSessiones
        {
            get
            {
                return this._ControlSessiones;
            }
            set
            {
                if (this._ControlSessiones != value)
                {
                    this.OnControlSessionesChanging(value);
                    this.SendPropertyChanging("ControlSessiones");
                    this._ControlSessiones = value;
                    this.SendPropertyChanged("ControlSessiones");
                    this.OnControlSessionesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Rol in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Rol_Usuario", Storage="_Rol", ThisKey="IdRol", OtherKey="IdRol", IsForeignKey=true)]
        public Rol Rol
        {
            get
            {
                return this._Rol.Entity;
            }
            set
            {
                Rol previousValue = this._Rol.Entity;
                if ((previousValue != value) || (this._Rol.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Rol");
                    if (previousValue != null)
                    {
                        this._Rol.Entity = null;
                        previousValue.Usuarios.Remove(this);
                    }
                    this._Rol.Entity = value;
                    if (value != null)
                    {
                        this._IdRol = value.IdRol;
                        value.Usuarios.Add(this);
                    }
                    else
                    {
                        this._IdRol = default(int);
                    }
                    this.SendPropertyChanged("Rol");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comentarios in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Usuario_Comentario", Storage="_Comentarios", ThisKey="IdUsuario", OtherKey="IdUsuario", DeleteRule="CASCADE")]
        public EntitySet<Comentario> Comentarios
        {
            get
            {
                return this._Comentarios;
            }
            set
            {
                this._Comentarios.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubirDescargars in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Usuario_SubirDescargar", Storage="_SubirDescargars", ThisKey="IdUsuario", OtherKey="IdUsuario", DeleteRule="CASCADE")]
        public EntitySet<SubirDescargar> SubirDescargars
        {
            get
            {
                return this._SubirDescargars;
            }
            set
            {
                this._SubirDescargars.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Archivos_IdModerador in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Usuario_Archivo", Storage="_Archivos_IdModerador", ThisKey="IdUsuario", OtherKey="IdModerador", DeleteRule="CASCADE")]
        public EntitySet<Archivo> Archivos_IdModerador
        {
            get
            {
                return this._Archivos_IdModerador;
            }
            set
            {
                this._Archivos_IdModerador.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Archivos_IdUsuario in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Usuario_Archivo1", Storage="_Archivos_IdUsuario", ThisKey="IdUsuario", OtherKey="IdUsuario", DeleteRule="CASCADE")]
        public EntitySet<Archivo> Archivos_IdUsuario
        {
            get
            {
                return this._Archivos_IdUsuario;
            }
            set
            {
                this._Archivos_IdUsuario.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Comentarios(Comentario entity)
        {
            this.SendPropertyChanging("Comentarios");
            entity.Usuario = this;
        }
    
        private void detach_Comentarios(Comentario entity)
        {
            this.SendPropertyChanging("Comentarios");
            entity.Usuario = null;
        }

        private void attach_SubirDescargars(SubirDescargar entity)
        {
            this.SendPropertyChanging("SubirDescargars");
            entity.Usuario = this;
        }
    
        private void detach_SubirDescargars(SubirDescargar entity)
        {
            this.SendPropertyChanging("SubirDescargars");
            entity.Usuario = null;
        }

        private void attach_Archivos_IdModerador(Archivo entity)
        {
            this.SendPropertyChanging("Archivos_IdModerador");
            entity.Usuario_IdModerador = this;
        }
    
        private void detach_Archivos_IdModerador(Archivo entity)
        {
            this.SendPropertyChanging("Archivos_IdModerador");
            entity.Usuario_IdModerador = null;
        }

        private void attach_Archivos_IdUsuario(Archivo entity)
        {
            this.SendPropertyChanging("Archivos_IdUsuario");
            entity.Usuario_IdUsuario = this;
        }
    
        private void detach_Archivos_IdUsuario(Archivo entity)
        {
            this.SendPropertyChanging("Archivos_IdUsuario");
            entity.Usuario_IdUsuario = null;
        }
    }

    /// <summary>
    /// Tabla que contiene las asociaciones de las tablas archivo y autor
    /// </summary>
    [Table(Name = @"public.archivo_autor")]
    public partial class ArchivoAutor : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdArchivoAutor;

        private int _IdAutor;

        private int _IdArchivo;

        private System.Nullable<int> _ModifiedBy;
        #pragma warning restore 0649

        private EntityRef<Archivo> _Archivo;

        private EntityRef<Autor> _Autor;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdArchivoAutorChanging(int value);
        partial void OnIdArchivoAutorChanged();
        partial void OnIdAutorChanging(int value);
        partial void OnIdAutorChanged();
        partial void OnIdArchivoChanging(int value);
        partial void OnIdArchivoChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        #endregion

        public ArchivoAutor()
        {
            this._Archivo  = default(EntityRef<Archivo>);
            this._Autor  = default(EntityRef<Autor>);
            OnCreated();
        }

    
        /// <summary>
        /// representa el identificador de la tabla
        /// </summary>
        [Column(Name = @"id_archivo_autor", Storage = "_IdArchivoAutor", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdArchivoAutor
        {
            get
            {
                return this._IdArchivoAutor;
            }
            set
            {
                if (this._IdArchivoAutor != value)
                {
                    this.OnIdArchivoAutorChanging(value);
                    this.SendPropertyChanging("IdArchivoAutor");
                    this._IdArchivoAutor = value;
                    this.SendPropertyChanged("IdArchivoAutor");
                    this.OnIdArchivoAutorChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el identificador del autor
        /// </summary>
        [Column(Name = @"id_autor", Storage = "_IdAutor", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdAutor
        {
            get
            {
                return this._IdAutor;
            }
            set
            {
                if (this._IdAutor != value)
                {
                    if (this._Autor.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdAutorChanging(value);
                    this.SendPropertyChanging("IdAutor");
                    this._IdAutor = value;
                    this.SendPropertyChanged("IdAutor");
                    this.OnIdAutorChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el identificador del archivo
        /// </summary>
        [Column(Name = @"id_archivo", Storage = "_IdArchivo", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdArchivo
        {
            get
            {
                return this._IdArchivo;
            }
            set
            {
                if (this._IdArchivo != value)
                {
                    if (this._Archivo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdArchivoChanging(value);
                    this.SendPropertyChanging("IdArchivo");
                    this._IdArchivo = value;
                    this.SendPropertyChanged("IdArchivo");
                    this.OnIdArchivoChanged();
                }
            }
        }

    
        /// <summary>
        /// Almacena el id del usuario que genera un cambio sobre la fila
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Archivo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Archivo_ArchivoAutor", Storage="_Archivo", ThisKey="IdArchivo", OtherKey="IdArchivo", IsForeignKey=true)]
        public Archivo Archivo
        {
            get
            {
                return this._Archivo.Entity;
            }
            set
            {
                Archivo previousValue = this._Archivo.Entity;
                if ((previousValue != value) || (this._Archivo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Archivo");
                    if (previousValue != null)
                    {
                        this._Archivo.Entity = null;
                        previousValue.ArchivoAutors.Remove(this);
                    }
                    this._Archivo.Entity = value;
                    if (value != null)
                    {
                        this._IdArchivo = value.IdArchivo;
                        value.ArchivoAutors.Add(this);
                    }
                    else
                    {
                        this._IdArchivo = default(int);
                    }
                    this.SendPropertyChanged("Archivo");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Autor in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Autor_ArchivoAutor", Storage="_Autor", ThisKey="IdAutor", OtherKey="IdAutor", IsForeignKey=true)]
        public Autor Autor
        {
            get
            {
                return this._Autor.Entity;
            }
            set
            {
                Autor previousValue = this._Autor.Entity;
                if ((previousValue != value) || (this._Autor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Autor");
                    if (previousValue != null)
                    {
                        this._Autor.Entity = null;
                        previousValue.ArchivoAutors.Remove(this);
                    }
                    this._Autor.Entity = value;
                    if (value != null)
                    {
                        this._IdAutor = value.IdAutor;
                        value.ArchivoAutors.Add(this);
                    }
                    else
                    {
                        this._IdAutor = default(int);
                    }
                    this.SendPropertyChanged("Autor");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Tabla que contiene la info del autor
    /// </summary>
    [Table(Name = @"public.autor")]
    public partial class Autor : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdAutor;

        private string _Nombre;

        private string _FechaNacimiento;

        private string _FechaMuerte;

        private string _Foto;

        private string _Descripcion;

        private int _IdNacionalidad;

        private System.Nullable<int> _ModifiedBy;
        #pragma warning restore 0649

        private EntitySet<ArchivoAutor> _ArchivoAutors;

        private EntityRef<Pai> _Pai;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdAutorChanging(int value);
        partial void OnIdAutorChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnFechaNacimientoChanging(string value);
        partial void OnFechaNacimientoChanged();
        partial void OnFechaMuerteChanging(string value);
        partial void OnFechaMuerteChanged();
        partial void OnFotoChanging(string value);
        partial void OnFotoChanged();
        partial void OnDescripcionChanging(string value);
        partial void OnDescripcionChanged();
        partial void OnIdNacionalidadChanging(int value);
        partial void OnIdNacionalidadChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        #endregion

        public Autor()
        {
            this._ArchivoAutors = new EntitySet<ArchivoAutor>(new Action<ArchivoAutor>(this.attach_ArchivoAutors), new Action<ArchivoAutor>(this.detach_ArchivoAutors));
            this._Pai  = default(EntityRef<Pai>);
            OnCreated();
        }

    
        /// <summary>
        /// representa el identificador de la tabla
        /// </summary>
        [Column(Name = @"id_autor", Storage = "_IdAutor", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdAutor
        {
            get
            {
                return this._IdAutor;
            }
            set
            {
                if (this._IdAutor != value)
                {
                    this.OnIdAutorChanging(value);
                    this.SendPropertyChanging("IdAutor");
                    this._IdAutor = value;
                    this.SendPropertyChanged("IdAutor");
                    this.OnIdAutorChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el nombre del autor
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// representa la fecha de nacimiento del autor
        /// </summary>
        [Column(Name = @"fecha_nacimiento", Storage = "_FechaNacimiento", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string FechaNacimiento
        {
            get
            {
                return this._FechaNacimiento;
            }
            set
            {
                if (this._FechaNacimiento != value)
                {
                    this.OnFechaNacimientoChanging(value);
                    this.SendPropertyChanging("FechaNacimiento");
                    this._FechaNacimiento = value;
                    this.SendPropertyChanged("FechaNacimiento");
                    this.OnFechaNacimientoChanged();
                }
            }
        }

    
        /// <summary>
        /// representa la fecha de muerte del autor (si aplica)
        /// </summary>
        [Column(Name = @"fecha_muerte", Storage = "_FechaMuerte", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string FechaMuerte
        {
            get
            {
                return this._FechaMuerte;
            }
            set
            {
                if (this._FechaMuerte != value)
                {
                    this.OnFechaMuerteChanging(value);
                    this.SendPropertyChanging("FechaMuerte");
                    this._FechaMuerte = value;
                    this.SendPropertyChanged("FechaMuerte");
                    this.OnFechaMuerteChanged();
                }
            }
        }

    
        /// <summary>
        /// almacena la url de la foto de autor alojada en el servidor
        /// </summary>
        [Column(Name = @"foto", Storage = "_Foto", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Foto
        {
            get
            {
                return this._Foto;
            }
            set
            {
                if (this._Foto != value)
                {
                    this.OnFotoChanging(value);
                    this.SendPropertyChanging("Foto");
                    this._Foto = value;
                    this.SendPropertyChanged("Foto");
                    this.OnFotoChanged();
                }
            }
        }

    
        /// <summary>
        /// representa una breve descipcion del autor
        /// </summary>
        [Column(Name = @"descripcion", Storage = "_Descripcion", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Descripcion
        {
            get
            {
                return this._Descripcion;
            }
            set
            {
                if (this._Descripcion != value)
                {
                    this.OnDescripcionChanging(value);
                    this.SendPropertyChanging("Descripcion");
                    this._Descripcion = value;
                    this.SendPropertyChanged("Descripcion");
                    this.OnDescripcionChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el identificador de la nacionalidad del autor
        /// </summary>
        [Column(Name = @"id_nacionalidad", Storage = "_IdNacionalidad", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdNacionalidad
        {
            get
            {
                return this._IdNacionalidad;
            }
            set
            {
                if (this._IdNacionalidad != value)
                {
                    if (this._Pai.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdNacionalidadChanging(value);
                    this.SendPropertyChanging("IdNacionalidad");
                    this._IdNacionalidad = value;
                    this.SendPropertyChanged("IdNacionalidad");
                    this.OnIdNacionalidadChanged();
                }
            }
        }

    
        /// <summary>
        /// Almacena el id del usuario que genera un cambio sobre la fila
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ArchivoAutors in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Autor_ArchivoAutor", Storage="_ArchivoAutors", ThisKey="IdAutor", OtherKey="IdAutor", DeleteRule="CASCADE")]
        public EntitySet<ArchivoAutor> ArchivoAutors
        {
            get
            {
                return this._ArchivoAutors;
            }
            set
            {
                this._ArchivoAutors.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Pai in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Pai_Autor", Storage="_Pai", ThisKey="IdNacionalidad", OtherKey="IdNacionalidad", IsForeignKey=true)]
        public Pai Pai
        {
            get
            {
                return this._Pai.Entity;
            }
            set
            {
                Pai previousValue = this._Pai.Entity;
                if ((previousValue != value) || (this._Pai.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Pai");
                    if (previousValue != null)
                    {
                        this._Pai.Entity = null;
                        previousValue.Autors.Remove(this);
                    }
                    this._Pai.Entity = value;
                    if (value != null)
                    {
                        this._IdNacionalidad = value.IdNacionalidad;
                        value.Autors.Add(this);
                    }
                    else
                    {
                        this._IdNacionalidad = default(int);
                    }
                    this.SendPropertyChanged("Pai");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ArchivoAutors(ArchivoAutor entity)
        {
            this.SendPropertyChanging("ArchivoAutors");
            entity.Autor = this;
        }
    
        private void detach_ArchivoAutors(ArchivoAutor entity)
        {
            this.SendPropertyChanging("ArchivoAutors");
            entity.Autor = null;
        }
    }

    /// <summary>
    /// Tabla que contiene los comentarios de los users en cada archivo
    /// </summary>
    [Table(Name = @"public.comentario")]
    public partial class Comentario : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdComentario;

        private int _IdUsuario;

        private int _IdArchivo;

        private string _Comentario1;

        private System.DateTime _Fecha;

        private System.Nullable<int> _ModifiedBy;
        #pragma warning restore 0649

        private EntityRef<Archivo> _Archivo;

        private EntityRef<Usuario> _Usuario;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdComentarioChanging(int value);
        partial void OnIdComentarioChanged();
        partial void OnIdUsuarioChanging(int value);
        partial void OnIdUsuarioChanged();
        partial void OnIdArchivoChanging(int value);
        partial void OnIdArchivoChanged();
        partial void OnComentario1Changing(string value);
        partial void OnComentario1Changed();
        partial void OnFechaChanging(System.DateTime value);
        partial void OnFechaChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        #endregion

        public Comentario()
        {
            this._Archivo  = default(EntityRef<Archivo>);
            this._Usuario  = default(EntityRef<Usuario>);
            OnCreated();
        }

    
        /// <summary>
        /// representa el identificador de la tabla
        /// </summary>
        [Column(Name = @"id_comentario", Storage = "_IdComentario", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdComentario
        {
            get
            {
                return this._IdComentario;
            }
            set
            {
                if (this._IdComentario != value)
                {
                    this.OnIdComentarioChanging(value);
                    this.SendPropertyChanging("IdComentario");
                    this._IdComentario = value;
                    this.SendPropertyChanged("IdComentario");
                    this.OnIdComentarioChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el identificador del usuario que comento
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    if (this._Usuario.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el identificador del archivo donde se comento
        /// </summary>
        [Column(Name = @"id_archivo", Storage = "_IdArchivo", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdArchivo
        {
            get
            {
                return this._IdArchivo;
            }
            set
            {
                if (this._IdArchivo != value)
                {
                    if (this._Archivo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdArchivoChanging(value);
                    this.SendPropertyChanging("IdArchivo");
                    this._IdArchivo = value;
                    this.SendPropertyChanged("IdArchivo");
                    this.OnIdArchivoChanged();
                }
            }
        }

    
        /// <summary>
        /// almacena el comentario del user
        /// </summary>
        [Column(Name = @"comentario", Storage = "_Comentario1", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Comentario1
        {
            get
            {
                return this._Comentario1;
            }
            set
            {
                if (this._Comentario1 != value)
                {
                    this.OnComentario1Changing(value);
                    this.SendPropertyChanging("Comentario1");
                    this._Comentario1 = value;
                    this.SendPropertyChanged("Comentario1");
                    this.OnComentario1Changed();
                }
            }
        }

    
        /// <summary>
        /// representa la fecha en que se comento
        /// </summary>
        [Column(Name = @"fecha", Storage = "_Fecha", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Fecha
        {
            get
            {
                return this._Fecha;
            }
            set
            {
                if (this._Fecha != value)
                {
                    this.OnFechaChanging(value);
                    this.SendPropertyChanging("Fecha");
                    this._Fecha = value;
                    this.SendPropertyChanged("Fecha");
                    this.OnFechaChanged();
                }
            }
        }

    
        /// <summary>
        /// Almacena el id del usuario que genera un cambio sobre la fila
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Archivo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Archivo_Comentario", Storage="_Archivo", ThisKey="IdArchivo", OtherKey="IdArchivo", IsForeignKey=true)]
        public Archivo Archivo
        {
            get
            {
                return this._Archivo.Entity;
            }
            set
            {
                Archivo previousValue = this._Archivo.Entity;
                if ((previousValue != value) || (this._Archivo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Archivo");
                    if (previousValue != null)
                    {
                        this._Archivo.Entity = null;
                        previousValue.Comentarios.Remove(this);
                    }
                    this._Archivo.Entity = value;
                    if (value != null)
                    {
                        this._IdArchivo = value.IdArchivo;
                        value.Comentarios.Add(this);
                    }
                    else
                    {
                        this._IdArchivo = default(int);
                    }
                    this.SendPropertyChanged("Archivo");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Usuario in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Usuario_Comentario", Storage="_Usuario", ThisKey="IdUsuario", OtherKey="IdUsuario", IsForeignKey=true)]
        public Usuario Usuario
        {
            get
            {
                return this._Usuario.Entity;
            }
            set
            {
                Usuario previousValue = this._Usuario.Entity;
                if ((previousValue != value) || (this._Usuario.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Usuario");
                    if (previousValue != null)
                    {
                        this._Usuario.Entity = null;
                        previousValue.Comentarios.Remove(this);
                    }
                    this._Usuario.Entity = value;
                    if (value != null)
                    {
                        this._IdUsuario = value.IdUsuario;
                        value.Comentarios.Add(this);
                    }
                    else
                    {
                        this._IdUsuario = default(int);
                    }
                    this.SendPropertyChanged("Usuario");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Tabla que contiene la nacionalidad del autor
    /// </summary>
    [Table(Name = @"public.pais")]
    public partial class Pai : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdNacionalidad;

        private string _Pais;

        private System.Nullable<int> _ModifiedBy;
        #pragma warning restore 0649

        private EntitySet<Autor> _Autors;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdNacionalidadChanging(int value);
        partial void OnIdNacionalidadChanged();
        partial void OnPaisChanging(string value);
        partial void OnPaisChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        #endregion

        public Pai()
        {
            this._Autors = new EntitySet<Autor>(new Action<Autor>(this.attach_Autors), new Action<Autor>(this.detach_Autors));
            OnCreated();
        }

    
        /// <summary>
        /// representa el identificador de la tabla
        /// </summary>
        [Column(Name = @"id_nacionalidad", Storage = "_IdNacionalidad", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdNacionalidad
        {
            get
            {
                return this._IdNacionalidad;
            }
            set
            {
                if (this._IdNacionalidad != value)
                {
                    this.OnIdNacionalidadChanging(value);
                    this.SendPropertyChanging("IdNacionalidad");
                    this._IdNacionalidad = value;
                    this.SendPropertyChanged("IdNacionalidad");
                    this.OnIdNacionalidadChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el nombre del pais
        /// </summary>
        [Column(Name = @"pais", Storage = "_Pais", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Pais
        {
            get
            {
                return this._Pais;
            }
            set
            {
                if (this._Pais != value)
                {
                    this.OnPaisChanging(value);
                    this.SendPropertyChanging("Pais");
                    this._Pais = value;
                    this.SendPropertyChanged("Pais");
                    this.OnPaisChanged();
                }
            }
        }

    
        /// <summary>
        /// Almacena el id del usuario que genera un cambio sobre la fila
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Autors in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Pai_Autor", Storage="_Autors", ThisKey="IdNacionalidad", OtherKey="IdNacionalidad", DeleteRule="CASCADE")]
        public EntitySet<Autor> Autors
        {
            get
            {
                return this._Autors;
            }
            set
            {
                this._Autors.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Autors(Autor entity)
        {
            this.SendPropertyChanging("Autors");
            entity.Pai = this;
        }
    
        private void detach_Autors(Autor entity)
        {
            this.SendPropertyChanging("Autors");
            entity.Pai = null;
        }
    }

    /// <summary>
    /// Tabla que contiene los roles en el sistema
    /// </summary>
    [Table(Name = @"public.rol")]
    public partial class Rol : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdRol;

        private string _Rol1;

        private System.Nullable<int> _ModifiedBy;
        #pragma warning restore 0649

        private EntitySet<Usuario> _Usuarios;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdRolChanging(int value);
        partial void OnIdRolChanged();
        partial void OnRol1Changing(string value);
        partial void OnRol1Changed();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        #endregion

        public Rol()
        {
            this._Usuarios = new EntitySet<Usuario>(new Action<Usuario>(this.attach_Usuarios), new Action<Usuario>(this.detach_Usuarios));
            OnCreated();
        }

    
        /// <summary>
        /// representa el identificador de la tabla
        /// </summary>
        [Column(Name = @"id_rol", Storage = "_IdRol", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdRol
        {
            get
            {
                return this._IdRol;
            }
            set
            {
                if (this._IdRol != value)
                {
                    this.OnIdRolChanging(value);
                    this.SendPropertyChanging("IdRol");
                    this._IdRol = value;
                    this.SendPropertyChanged("IdRol");
                    this.OnIdRolChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el nombre del rol, por defecto 3 (admin, mod, user)
        /// </summary>
        [Column(Name = @"rol", Storage = "_Rol1", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Rol1
        {
            get
            {
                return this._Rol1;
            }
            set
            {
                if (this._Rol1 != value)
                {
                    this.OnRol1Changing(value);
                    this.SendPropertyChanging("Rol1");
                    this._Rol1 = value;
                    this.SendPropertyChanged("Rol1");
                    this.OnRol1Changed();
                }
            }
        }

    
        /// <summary>
        /// Almacena el id del usuario que genera un cambio sobre la fila
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Usuarios in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Rol_Usuario", Storage="_Usuarios", ThisKey="IdRol", OtherKey="IdRol", DeleteRule="CASCADE")]
        public EntitySet<Usuario> Usuarios
        {
            get
            {
                return this._Usuarios;
            }
            set
            {
                this._Usuarios.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Usuarios(Usuario entity)
        {
            this.SendPropertyChanging("Usuarios");
            entity.Rol = this;
        }
    
        private void detach_Usuarios(Usuario entity)
        {
            this.SendPropertyChanging("Usuarios");
            entity.Rol = null;
        }
    }

    /// <summary>
    /// Tabla que contiene el historial de las transacciones sobre los archivos en el sistema (upload, download)
    /// </summary>
    [Table(Name = @"public.subir_descargar")]
    public partial class SubirDescargar : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdSubirDescargar;

        private int _IdUsuario;

        private int _IdArchivo;

        private string _Concepto;

        private System.Nullable<int> _Precio;

        private System.Nullable<System.DateTime> _Fecha;

        private System.Nullable<int> _ModifiedBy;
        #pragma warning restore 0649

        private EntityRef<Archivo> _Archivo;

        private EntityRef<Usuario> _Usuario;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdSubirDescargarChanging(int value);
        partial void OnIdSubirDescargarChanged();
        partial void OnIdUsuarioChanging(int value);
        partial void OnIdUsuarioChanged();
        partial void OnIdArchivoChanging(int value);
        partial void OnIdArchivoChanged();
        partial void OnConceptoChanging(string value);
        partial void OnConceptoChanged();
        partial void OnPrecioChanging(System.Nullable<int> value);
        partial void OnPrecioChanged();
        partial void OnFechaChanging(System.Nullable<System.DateTime> value);
        partial void OnFechaChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        #endregion

        public SubirDescargar()
        {
            this._Archivo  = default(EntityRef<Archivo>);
            this._Usuario  = default(EntityRef<Usuario>);
            OnCreated();
        }

    
        /// <summary>
        /// representa el identificador de la tabla
        /// </summary>
        [Column(Name = @"id_subir_descargar", Storage = "_IdSubirDescargar", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdSubirDescargar
        {
            get
            {
                return this._IdSubirDescargar;
            }
            set
            {
                if (this._IdSubirDescargar != value)
                {
                    this.OnIdSubirDescargarChanging(value);
                    this.SendPropertyChanging("IdSubirDescargar");
                    this._IdSubirDescargar = value;
                    this.SendPropertyChanged("IdSubirDescargar");
                    this.OnIdSubirDescargarChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el identificador del user que subio/descargo el archivo
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    if (this._Usuario.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el identificador del archivo que se subio/descargo del sistema
        /// </summary>
        [Column(Name = @"id_archivo", Storage = "_IdArchivo", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdArchivo
        {
            get
            {
                return this._IdArchivo;
            }
            set
            {
                if (this._IdArchivo != value)
                {
                    if (this._Archivo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdArchivoChanging(value);
                    this.SendPropertyChanging("IdArchivo");
                    this._IdArchivo = value;
                    this.SendPropertyChanged("IdArchivo");
                    this.OnIdArchivoChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el tipo de transaccion hecha (upload, download)
        /// </summary>
        [Column(Name = @"concepto", Storage = "_Concepto", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Concepto
        {
            get
            {
                return this._Concepto;
            }
            set
            {
                if (this._Concepto != value)
                {
                    this.OnConceptoChanging(value);
                    this.SendPropertyChanging("Concepto");
                    this._Concepto = value;
                    this.SendPropertyChanged("Concepto");
                    this.OnConceptoChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el precio del archivo: upload siempre es 0 porque el archivo no ha sido moderado, download ya posee el precio asignado en la moderacion
        /// </summary>
        [Column(Name = @"precio", Storage = "_Precio", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Precio
        {
            get
            {
                return this._Precio;
            }
            set
            {
                if (this._Precio != value)
                {
                    this.OnPrecioChanging(value);
                    this.SendPropertyChanging("Precio");
                    this._Precio = value;
                    this.SendPropertyChanged("Precio");
                    this.OnPrecioChanged();
                }
            }
        }

    
        /// <summary>
        /// representa la fecha en que se subio/descargo el archivo
        /// </summary>
        [Column(Name = @"fecha", Storage = "_Fecha", DbType = "TIMESTAMP", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Fecha
        {
            get
            {
                return this._Fecha;
            }
            set
            {
                if (this._Fecha != value)
                {
                    this.OnFechaChanging(value);
                    this.SendPropertyChanging("Fecha");
                    this._Fecha = value;
                    this.SendPropertyChanged("Fecha");
                    this.OnFechaChanged();
                }
            }
        }

    
        /// <summary>
        /// Almacena el id del usuario que genera un cambio sobre la fila
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Archivo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Archivo_SubirDescargar", Storage="_Archivo", ThisKey="IdArchivo", OtherKey="IdArchivo", IsForeignKey=true)]
        public Archivo Archivo
        {
            get
            {
                return this._Archivo.Entity;
            }
            set
            {
                Archivo previousValue = this._Archivo.Entity;
                if ((previousValue != value) || (this._Archivo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Archivo");
                    if (previousValue != null)
                    {
                        this._Archivo.Entity = null;
                        previousValue.SubirDescargars.Remove(this);
                    }
                    this._Archivo.Entity = value;
                    if (value != null)
                    {
                        this._IdArchivo = value.IdArchivo;
                        value.SubirDescargars.Add(this);
                    }
                    else
                    {
                        this._IdArchivo = default(int);
                    }
                    this.SendPropertyChanged("Archivo");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Usuario in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Usuario_SubirDescargar", Storage="_Usuario", ThisKey="IdUsuario", OtherKey="IdUsuario", IsForeignKey=true)]
        public Usuario Usuario
        {
            get
            {
                return this._Usuario.Entity;
            }
            set
            {
                Usuario previousValue = this._Usuario.Entity;
                if ((previousValue != value) || (this._Usuario.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Usuario");
                    if (previousValue != null)
                    {
                        this._Usuario.Entity = null;
                        previousValue.SubirDescargars.Remove(this);
                    }
                    this._Usuario.Entity = value;
                    if (value != null)
                    {
                        this._IdUsuario = value.IdUsuario;
                        value.SubirDescargars.Add(this);
                    }
                    else
                    {
                        this._IdUsuario = default(int);
                    }
                    this.SendPropertyChanged("Usuario");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Tabla que contiene los index para cada archivo
    /// </summary>
    [Table(Name = @"public.tags")]
    public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdTags;

        private string _Tag1;

        private System.Nullable<int> _ModifiedBy;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdTagsChanging(int value);
        partial void OnIdTagsChanged();
        partial void OnTag1Changing(string value);
        partial void OnTag1Changed();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        #endregion

        public Tag()
        {
            OnCreated();
        }

    
        /// <summary>
        /// representa el identificador de la tabla
        /// </summary>
        [Column(Name = @"id_tags", Storage = "_IdTags", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdTags
        {
            get
            {
                return this._IdTags;
            }
            set
            {
                if (this._IdTags != value)
                {
                    this.OnIdTagsChanging(value);
                    this.SendPropertyChanging("IdTags");
                    this._IdTags = value;
                    this.SendPropertyChanged("IdTags");
                    this.OnIdTagsChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el nombre del index
        /// </summary>
        [Column(Name = @"tag", Storage = "_Tag1", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Tag1
        {
            get
            {
                return this._Tag1;
            }
            set
            {
                if (this._Tag1 != value)
                {
                    this.OnTag1Changing(value);
                    this.SendPropertyChanging("Tag1");
                    this._Tag1 = value;
                    this.SendPropertyChanged("Tag1");
                    this.OnTag1Changed();
                }
            }
        }

    
        /// <summary>
        /// Almacena el id del usuario que genera un cambio sobre la fila
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Tabla que contiene el estado (aprobado, no aprobado) de un archivo
    /// </summary>
    [Table(Name = @"public.estado")]
    public partial class Estado : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdEstado;

        private string _Estado1;

        private System.Nullable<int> _ModifiedBy;
        #pragma warning restore 0649

        private EntitySet<Archivo> _Archivos;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdEstadoChanging(int value);
        partial void OnIdEstadoChanged();
        partial void OnEstado1Changing(string value);
        partial void OnEstado1Changed();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        #endregion

        public Estado()
        {
            this._Archivos = new EntitySet<Archivo>(new Action<Archivo>(this.attach_Archivos), new Action<Archivo>(this.detach_Archivos));
            OnCreated();
        }

    
        /// <summary>
        /// representa el identificador de la tabla
        /// </summary>
        [Column(Name = @"id_estado", Storage = "_IdEstado", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdEstado
        {
            get
            {
                return this._IdEstado;
            }
            set
            {
                if (this._IdEstado != value)
                {
                    this.OnIdEstadoChanging(value);
                    this.SendPropertyChanging("IdEstado");
                    this._IdEstado = value;
                    this.SendPropertyChanged("IdEstado");
                    this.OnIdEstadoChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el nombre del estado, por defecto 2 (aprobado, no aprobado)
        /// </summary>
        [Column(Name = @"estado", Storage = "_Estado1", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Estado1
        {
            get
            {
                return this._Estado1;
            }
            set
            {
                if (this._Estado1 != value)
                {
                    this.OnEstado1Changing(value);
                    this.SendPropertyChanging("Estado1");
                    this._Estado1 = value;
                    this.SendPropertyChanged("Estado1");
                    this.OnEstado1Changed();
                }
            }
        }

    
        /// <summary>
        /// Almacena el id del usuario que genera un cambio sobre la fila
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Archivos in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Estado_Archivo", Storage="_Archivos", ThisKey="IdEstado", OtherKey="IdEstado", DeleteRule="CASCADE")]
        public EntitySet<Archivo> Archivos
        {
            get
            {
                return this._Archivos;
            }
            set
            {
                this._Archivos.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Archivos(Archivo entity)
        {
            this.SendPropertyChanging("Archivos");
            entity.Estado = this;
        }
    
        private void detach_Archivos(Archivo entity)
        {
            this.SendPropertyChanging("Archivos");
            entity.Estado = null;
        }
    }

    /// <summary>
    /// Tabla que almacena la info de los archivos subidos al sistema
    /// </summary>
    [Table(Name = @"public.archivo")]
    public partial class Archivo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdArchivo;

        private string _Nombre;

        private string _Anio;

        private string _Sinopsis;

        private int _NumPag;

        private string _ImagenPortada;

        private string _Url;

        private int _IdUsuario;

        private int _IdEstado;

        private System.Nullable<int> _IdCategoria;

        private string _Tags;

        private int _IdModerador;

        private System.Nullable<int> _EstadoMod;

        private System.Nullable<int> _ModifiedBy;
        #pragma warning restore 0649

        private EntitySet<ArchivoAutor> _ArchivoAutors;

        private EntitySet<Comentario> _Comentarios;

        private EntitySet<SubirDescargar> _SubirDescargars;

        private EntityRef<Categoria> _Categoria;

        private EntityRef<Estado> _Estado;

        private EntityRef<Usuario> _Usuario_IdModerador;

        private EntityRef<Usuario> _Usuario_IdUsuario;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdArchivoChanging(int value);
        partial void OnIdArchivoChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnAnioChanging(string value);
        partial void OnAnioChanged();
        partial void OnSinopsisChanging(string value);
        partial void OnSinopsisChanged();
        partial void OnNumPagChanging(int value);
        partial void OnNumPagChanged();
        partial void OnImagenPortadaChanging(string value);
        partial void OnImagenPortadaChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnIdUsuarioChanging(int value);
        partial void OnIdUsuarioChanged();
        partial void OnIdEstadoChanging(int value);
        partial void OnIdEstadoChanged();
        partial void OnIdCategoriaChanging(System.Nullable<int> value);
        partial void OnIdCategoriaChanged();
        partial void OnTagsChanging(string value);
        partial void OnTagsChanged();
        partial void OnIdModeradorChanging(int value);
        partial void OnIdModeradorChanged();
        partial void OnEstadoModChanging(System.Nullable<int> value);
        partial void OnEstadoModChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        #endregion

        public Archivo()
        {
            this._ArchivoAutors = new EntitySet<ArchivoAutor>(new Action<ArchivoAutor>(this.attach_ArchivoAutors), new Action<ArchivoAutor>(this.detach_ArchivoAutors));
            this._Comentarios = new EntitySet<Comentario>(new Action<Comentario>(this.attach_Comentarios), new Action<Comentario>(this.detach_Comentarios));
            this._SubirDescargars = new EntitySet<SubirDescargar>(new Action<SubirDescargar>(this.attach_SubirDescargars), new Action<SubirDescargar>(this.detach_SubirDescargars));
            this._Categoria  = default(EntityRef<Categoria>);
            this._Estado  = default(EntityRef<Estado>);
            this._Usuario_IdModerador  = default(EntityRef<Usuario>);
            this._Usuario_IdUsuario  = default(EntityRef<Usuario>);
            OnCreated();
        }

    
        /// <summary>
        /// representa el identificador de la tabla
        /// </summary>
        [Column(Name = @"id_archivo", Storage = "_IdArchivo", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdArchivo
        {
            get
            {
                return this._IdArchivo;
            }
            set
            {
                if (this._IdArchivo != value)
                {
                    this.OnIdArchivoChanging(value);
                    this.SendPropertyChanging("IdArchivo");
                    this._IdArchivo = value;
                    this.SendPropertyChanged("IdArchivo");
                    this.OnIdArchivoChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el nombre del archivo
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el anio de publicacion del archivo
        /// </summary>
        [Column(Name = @"anio", Storage = "_Anio", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Anio
        {
            get
            {
                return this._Anio;
            }
            set
            {
                if (this._Anio != value)
                {
                    this.OnAnioChanging(value);
                    this.SendPropertyChanging("Anio");
                    this._Anio = value;
                    this.SendPropertyChanged("Anio");
                    this.OnAnioChanged();
                }
            }
        }

    
        /// <summary>
        /// representa la descripcion general del contenido del archivo
        /// </summary>
        [Column(Name = @"sinopsis", Storage = "_Sinopsis", CanBeNull = false, DbType = "VARCHAR(1000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Sinopsis
        {
            get
            {
                return this._Sinopsis;
            }
            set
            {
                if (this._Sinopsis != value)
                {
                    this.OnSinopsisChanging(value);
                    this.SendPropertyChanging("Sinopsis");
                    this._Sinopsis = value;
                    this.SendPropertyChanged("Sinopsis");
                    this.OnSinopsisChanged();
                }
            }
        }

    
        /// <summary>
        /// representa la cantidad de hojas que tiene el archivo
        /// </summary>
        [Column(Name = @"num_pag", Storage = "_NumPag", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int NumPag
        {
            get
            {
                return this._NumPag;
            }
            set
            {
                if (this._NumPag != value)
                {
                    this.OnNumPagChanging(value);
                    this.SendPropertyChanging("NumPag");
                    this._NumPag = value;
                    this.SendPropertyChanged("NumPag");
                    this.OnNumPagChanged();
                }
            }
        }

    
        /// <summary>
        /// almacena la url de la imagen de portada alojada en el servidor
        /// </summary>
        [Column(Name = @"imagen_portada", Storage = "_ImagenPortada", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ImagenPortada
        {
            get
            {
                return this._ImagenPortada;
            }
            set
            {
                if (this._ImagenPortada != value)
                {
                    this.OnImagenPortadaChanging(value);
                    this.SendPropertyChanging("ImagenPortada");
                    this._ImagenPortada = value;
                    this.SendPropertyChanged("ImagenPortada");
                    this.OnImagenPortadaChanged();
                }
            }
        }

    
        /// <summary>
        /// almacena la url del archivo alojado en el servidor
        /// </summary>
        [Column(Name = @"url", Storage = "_Url", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging("Url");
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el id del usuario que subio el archivo
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    if (this._Usuario_IdUsuario.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el estado (aprobado, no aprobado) en que se encuentra el archivo
        /// </summary>
        [Column(Name = @"id_estado", Storage = "_IdEstado", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdEstado
        {
            get
            {
                return this._IdEstado;
            }
            set
            {
                if (this._IdEstado != value)
                {
                    if (this._Estado.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdEstadoChanging(value);
                    this.SendPropertyChanging("IdEstado");
                    this._IdEstado = value;
                    this.SendPropertyChanged("IdEstado");
                    this.OnIdEstadoChanged();
                }
            }
        }

    
        /// <summary>
        /// representa la categoria asociada al archivo
        /// </summary>
        [Column(Name = @"id_categoria", Storage = "_IdCategoria", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdCategoria
        {
            get
            {
                return this._IdCategoria;
            }
            set
            {
                if (this._IdCategoria != value)
                {
                    if (this._Categoria.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdCategoriaChanging(value);
                    this.SendPropertyChanging("IdCategoria");
                    this._IdCategoria = value;
                    this.SendPropertyChanged("IdCategoria");
                    this.OnIdCategoriaChanged();
                }
            }
        }

    
        /// <summary>
        /// representa los index que posee el archivo
        /// </summary>
        [Column(Name = @"tags", Storage = "_Tags", DbType = "VARCHAR(300)", UpdateCheck = UpdateCheck.Never)]
        public string Tags
        {
            get
            {
                return this._Tags;
            }
            set
            {
                if (this._Tags != value)
                {
                    this.OnTagsChanging(value);
                    this.SendPropertyChanging("Tags");
                    this._Tags = value;
                    this.SendPropertyChanged("Tags");
                    this.OnTagsChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el id del moderador del sistema, por defecto 1=>Admin
        /// </summary>
        [Column(Name = @"id_moderador", Storage = "_IdModerador", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdModerador
        {
            get
            {
                return this._IdModerador;
            }
            set
            {
                if (this._IdModerador != value)
                {
                    if (this._Usuario_IdModerador.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdModeradorChanging(value);
                    this.SendPropertyChanging("IdModerador");
                    this._IdModerador = value;
                    this.SendPropertyChanged("IdModerador");
                    this.OnIdModeradorChanged();
                }
            }
        }

    
        /// <summary>
        /// permite saber si el archivo esta moderado o no (1,2) con el fin de evitar moderar un mismo archivo al mismo tiempo
        /// </summary>
        [Column(Name = @"estado_mod", Storage = "_EstadoMod", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> EstadoMod
        {
            get
            {
                return this._EstadoMod;
            }
            set
            {
                if (this._EstadoMod != value)
                {
                    this.OnEstadoModChanging(value);
                    this.SendPropertyChanging("EstadoMod");
                    this._EstadoMod = value;
                    this.SendPropertyChanged("EstadoMod");
                    this.OnEstadoModChanged();
                }
            }
        }

    
        /// <summary>
        /// Almacena el id del usuario que genera un cambio sobre la fila
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ArchivoAutors in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Archivo_ArchivoAutor", Storage="_ArchivoAutors", ThisKey="IdArchivo", OtherKey="IdArchivo", DeleteRule="CASCADE")]
        public EntitySet<ArchivoAutor> ArchivoAutors
        {
            get
            {
                return this._ArchivoAutors;
            }
            set
            {
                this._ArchivoAutors.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Comentarios in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Archivo_Comentario", Storage="_Comentarios", ThisKey="IdArchivo", OtherKey="IdArchivo", DeleteRule="CASCADE")]
        public EntitySet<Comentario> Comentarios
        {
            get
            {
                return this._Comentarios;
            }
            set
            {
                this._Comentarios.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubirDescargars in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Archivo_SubirDescargar", Storage="_SubirDescargars", ThisKey="IdArchivo", OtherKey="IdArchivo", DeleteRule="CASCADE")]
        public EntitySet<SubirDescargar> SubirDescargars
        {
            get
            {
                return this._SubirDescargars;
            }
            set
            {
                this._SubirDescargars.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Categoria in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Categoria_Archivo", Storage="_Categoria", ThisKey="IdCategoria", OtherKey="IdCategoria", IsForeignKey=true)]
        public Categoria Categoria
        {
            get
            {
                return this._Categoria.Entity;
            }
            set
            {
                Categoria previousValue = this._Categoria.Entity;
                if ((previousValue != value) || (this._Categoria.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Categoria");
                    if (previousValue != null)
                    {
                        this._Categoria.Entity = null;
                        previousValue.Archivos.Remove(this);
                    }
                    this._Categoria.Entity = value;
                    if (value != null)
                    {
                        this._IdCategoria = value.IdCategoria;
                        value.Archivos.Add(this);
                    }
                    else
                    {
                        this._IdCategoria = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Categoria");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Estado in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Estado_Archivo", Storage="_Estado", ThisKey="IdEstado", OtherKey="IdEstado", IsForeignKey=true)]
        public Estado Estado
        {
            get
            {
                return this._Estado.Entity;
            }
            set
            {
                Estado previousValue = this._Estado.Entity;
                if ((previousValue != value) || (this._Estado.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Estado");
                    if (previousValue != null)
                    {
                        this._Estado.Entity = null;
                        previousValue.Archivos.Remove(this);
                    }
                    this._Estado.Entity = value;
                    if (value != null)
                    {
                        this._IdEstado = value.IdEstado;
                        value.Archivos.Add(this);
                    }
                    else
                    {
                        this._IdEstado = default(int);
                    }
                    this.SendPropertyChanged("Estado");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Usuario_IdModerador in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Usuario_Archivo", Storage="_Usuario_IdModerador", ThisKey="IdModerador", OtherKey="IdUsuario", IsForeignKey=true)]
        public Usuario Usuario_IdModerador
        {
            get
            {
                return this._Usuario_IdModerador.Entity;
            }
            set
            {
                Usuario previousValue = this._Usuario_IdModerador.Entity;
                if ((previousValue != value) || (this._Usuario_IdModerador.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Usuario_IdModerador");
                    if (previousValue != null)
                    {
                        this._Usuario_IdModerador.Entity = null;
                        previousValue.Archivos_IdModerador.Remove(this);
                    }
                    this._Usuario_IdModerador.Entity = value;
                    if (value != null)
                    {
                        this._IdModerador = value.IdUsuario;
                        value.Archivos_IdModerador.Add(this);
                    }
                    else
                    {
                        this._IdModerador = default(int);
                    }
                    this.SendPropertyChanged("Usuario_IdModerador");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Usuario_IdUsuario in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Usuario_Archivo1", Storage="_Usuario_IdUsuario", ThisKey="IdUsuario", OtherKey="IdUsuario", IsForeignKey=true)]
        public Usuario Usuario_IdUsuario
        {
            get
            {
                return this._Usuario_IdUsuario.Entity;
            }
            set
            {
                Usuario previousValue = this._Usuario_IdUsuario.Entity;
                if ((previousValue != value) || (this._Usuario_IdUsuario.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Usuario_IdUsuario");
                    if (previousValue != null)
                    {
                        this._Usuario_IdUsuario.Entity = null;
                        previousValue.Archivos_IdUsuario.Remove(this);
                    }
                    this._Usuario_IdUsuario.Entity = value;
                    if (value != null)
                    {
                        this._IdUsuario = value.IdUsuario;
                        value.Archivos_IdUsuario.Add(this);
                    }
                    else
                    {
                        this._IdUsuario = default(int);
                    }
                    this.SendPropertyChanged("Usuario_IdUsuario");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ArchivoAutors(ArchivoAutor entity)
        {
            this.SendPropertyChanging("ArchivoAutors");
            entity.Archivo = this;
        }
    
        private void detach_ArchivoAutors(ArchivoAutor entity)
        {
            this.SendPropertyChanging("ArchivoAutors");
            entity.Archivo = null;
        }

        private void attach_Comentarios(Comentario entity)
        {
            this.SendPropertyChanging("Comentarios");
            entity.Archivo = this;
        }
    
        private void detach_Comentarios(Comentario entity)
        {
            this.SendPropertyChanging("Comentarios");
            entity.Archivo = null;
        }

        private void attach_SubirDescargars(SubirDescargar entity)
        {
            this.SendPropertyChanging("SubirDescargars");
            entity.Archivo = this;
        }
    
        private void detach_SubirDescargars(SubirDescargar entity)
        {
            this.SendPropertyChanging("SubirDescargars");
            entity.Archivo = null;
        }
    }

    /// <summary>
    /// Tabla que contiene la info de la categoria de cada archivo
    /// </summary>
    [Table(Name = @"public.categoria")]
    public partial class Categoria : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdCategoria;

        private string _Categoria1;

        private System.Nullable<int> _Precio;

        private System.Nullable<int> _ModifiedBy;
        #pragma warning restore 0649

        private EntitySet<Archivo> _Archivos;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCategoriaChanging(int value);
        partial void OnIdCategoriaChanged();
        partial void OnCategoria1Changing(string value);
        partial void OnCategoria1Changed();
        partial void OnPrecioChanging(System.Nullable<int> value);
        partial void OnPrecioChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        #endregion

        public Categoria()
        {
            this._Archivos = new EntitySet<Archivo>(new Action<Archivo>(this.attach_Archivos), new Action<Archivo>(this.detach_Archivos));
            OnCreated();
        }

    
        /// <summary>
        /// representa el identificador de la tabla
        /// </summary>
        [Column(Name = @"id_categoria", Storage = "_IdCategoria", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdCategoria
        {
            get
            {
                return this._IdCategoria;
            }
            set
            {
                if (this._IdCategoria != value)
                {
                    this.OnIdCategoriaChanging(value);
                    this.SendPropertyChanging("IdCategoria");
                    this._IdCategoria = value;
                    this.SendPropertyChanged("IdCategoria");
                    this.OnIdCategoriaChanged();
                }
            }
        }

    
        /// <summary>
        /// representa el nombre de la categoria
        /// </summary>
        [Column(Name = @"categoria", Storage = "_Categoria1", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Categoria1
        {
            get
            {
                return this._Categoria1;
            }
            set
            {
                if (this._Categoria1 != value)
                {
                    this.OnCategoria1Changing(value);
                    this.SendPropertyChanging("Categoria1");
                    this._Categoria1 = value;
                    this.SendPropertyChanged("Categoria1");
                    this.OnCategoria1Changed();
                }
            }
        }

    
        /// <summary>
        /// representa el precio que posee la categoria
        /// </summary>
        [Column(Name = @"precio", Storage = "_Precio", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Precio
        {
            get
            {
                return this._Precio;
            }
            set
            {
                if (this._Precio != value)
                {
                    this.OnPrecioChanging(value);
                    this.SendPropertyChanging("Precio");
                    this._Precio = value;
                    this.SendPropertyChanged("Precio");
                    this.OnPrecioChanged();
                }
            }
        }

    
        /// <summary>
        /// Almacena el id del usuario que genera un cambio sobre la fila
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Archivos in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Categoria_Archivo", Storage="_Archivos", ThisKey="IdCategoria", OtherKey="IdCategoria", DeleteRule="CASCADE")]
        public EntitySet<Archivo> Archivos
        {
            get
            {
                return this._Archivos;
            }
            set
            {
                this._Archivos.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Archivos(Archivo entity)
        {
            this.SendPropertyChanging("Archivos");
            entity.Categoria = this;
        }
    
        private void detach_Archivos(Archivo entity)
        {
            this.SendPropertyChanging("Archivos");
            entity.Categoria = null;
        }
    }

}

namespace AulaWebContext_public
{

    /// <summary>
    /// There are no comments for SpVerArchivoResult in the schema.
    /// </summary>
    public partial class SpVerArchivoResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private System.Nullable<int> _IdArchivo;

        private string _Nombre;

        private string _Anio;

        private string _Sinopsis;

        private System.Nullable<int> _NumPag;

        private string _ImagenPortada;

        private string _Url;

        private System.Nullable<int> _IdUsuario;

        private System.Nullable<int> _IdEstado;

        private System.Nullable<int> _IdCategoria;

        private string _Tags;

        private System.Nullable<int> _IdModerador;

        private System.Nullable<int> _EstadoMod;

        private System.Nullable<int> _ModifiedBy;

        private string _Categoria;

        private System.Nullable<int> _Precio;

        private string _NombreAutor;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdArchivoChanging(System.Nullable<int> value);
        partial void OnIdArchivoChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnAnioChanging(string value);
        partial void OnAnioChanged();
        partial void OnSinopsisChanging(string value);
        partial void OnSinopsisChanged();
        partial void OnNumPagChanging(System.Nullable<int> value);
        partial void OnNumPagChanged();
        partial void OnImagenPortadaChanging(string value);
        partial void OnImagenPortadaChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnIdUsuarioChanging(System.Nullable<int> value);
        partial void OnIdUsuarioChanged();
        partial void OnIdEstadoChanging(System.Nullable<int> value);
        partial void OnIdEstadoChanged();
        partial void OnIdCategoriaChanging(System.Nullable<int> value);
        partial void OnIdCategoriaChanged();
        partial void OnTagsChanging(string value);
        partial void OnTagsChanged();
        partial void OnIdModeradorChanging(System.Nullable<int> value);
        partial void OnIdModeradorChanged();
        partial void OnEstadoModChanging(System.Nullable<int> value);
        partial void OnEstadoModChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        partial void OnCategoriaChanging(string value);
        partial void OnCategoriaChanged();
        partial void OnPrecioChanging(System.Nullable<int> value);
        partial void OnPrecioChanged();
        partial void OnNombreAutorChanging(string value);
        partial void OnNombreAutorChanged();
        #endregion

        public SpVerArchivoResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdArchivo in the schema.
        /// </summary>
        [Column(Name = @"id_archivo", Storage = "_IdArchivo", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdArchivo
        {
            get
            {
                return this._IdArchivo;
            }
            set
            {
                if (this._IdArchivo != value)
                {
                    this.OnIdArchivoChanging(value);
                    this.SendPropertyChanging("IdArchivo");
                    this._IdArchivo = value;
                    this.SendPropertyChanged("IdArchivo");
                    this.OnIdArchivoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anio in the schema.
        /// </summary>
        [Column(Name = @"anio", Storage = "_Anio", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Anio
        {
            get
            {
                return this._Anio;
            }
            set
            {
                if (this._Anio != value)
                {
                    this.OnAnioChanging(value);
                    this.SendPropertyChanging("Anio");
                    this._Anio = value;
                    this.SendPropertyChanged("Anio");
                    this.OnAnioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sinopsis in the schema.
        /// </summary>
        [Column(Name = @"sinopsis", Storage = "_Sinopsis", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Sinopsis
        {
            get
            {
                return this._Sinopsis;
            }
            set
            {
                if (this._Sinopsis != value)
                {
                    this.OnSinopsisChanging(value);
                    this.SendPropertyChanging("Sinopsis");
                    this._Sinopsis = value;
                    this.SendPropertyChanged("Sinopsis");
                    this.OnSinopsisChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumPag in the schema.
        /// </summary>
        [Column(Name = @"num_pag", Storage = "_NumPag", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> NumPag
        {
            get
            {
                return this._NumPag;
            }
            set
            {
                if (this._NumPag != value)
                {
                    this.OnNumPagChanging(value);
                    this.SendPropertyChanging("NumPag");
                    this._NumPag = value;
                    this.SendPropertyChanged("NumPag");
                    this.OnNumPagChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImagenPortada in the schema.
        /// </summary>
        [Column(Name = @"imagen_portada", Storage = "_ImagenPortada", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ImagenPortada
        {
            get
            {
                return this._ImagenPortada;
            }
            set
            {
                if (this._ImagenPortada != value)
                {
                    this.OnImagenPortadaChanging(value);
                    this.SendPropertyChanging("ImagenPortada");
                    this._ImagenPortada = value;
                    this.SendPropertyChanged("ImagenPortada");
                    this.OnImagenPortadaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Url in the schema.
        /// </summary>
        [Column(Name = @"url", Storage = "_Url", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging("Url");
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUsuario in the schema.
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdEstado in the schema.
        /// </summary>
        [Column(Name = @"id_estado", Storage = "_IdEstado", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdEstado
        {
            get
            {
                return this._IdEstado;
            }
            set
            {
                if (this._IdEstado != value)
                {
                    this.OnIdEstadoChanging(value);
                    this.SendPropertyChanging("IdEstado");
                    this._IdEstado = value;
                    this.SendPropertyChanged("IdEstado");
                    this.OnIdEstadoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdCategoria in the schema.
        /// </summary>
        [Column(Name = @"id_categoria", Storage = "_IdCategoria", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdCategoria
        {
            get
            {
                return this._IdCategoria;
            }
            set
            {
                if (this._IdCategoria != value)
                {
                    this.OnIdCategoriaChanging(value);
                    this.SendPropertyChanging("IdCategoria");
                    this._IdCategoria = value;
                    this.SendPropertyChanged("IdCategoria");
                    this.OnIdCategoriaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tags in the schema.
        /// </summary>
        [Column(Name = @"tags", Storage = "_Tags", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Tags
        {
            get
            {
                return this._Tags;
            }
            set
            {
                if (this._Tags != value)
                {
                    this.OnTagsChanging(value);
                    this.SendPropertyChanging("Tags");
                    this._Tags = value;
                    this.SendPropertyChanged("Tags");
                    this.OnTagsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdModerador in the schema.
        /// </summary>
        [Column(Name = @"id_moderador", Storage = "_IdModerador", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdModerador
        {
            get
            {
                return this._IdModerador;
            }
            set
            {
                if (this._IdModerador != value)
                {
                    this.OnIdModeradorChanging(value);
                    this.SendPropertyChanging("IdModerador");
                    this._IdModerador = value;
                    this.SendPropertyChanged("IdModerador");
                    this.OnIdModeradorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EstadoMod in the schema.
        /// </summary>
        [Column(Name = @"estado_mod", Storage = "_EstadoMod", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> EstadoMod
        {
            get
            {
                return this._EstadoMod;
            }
            set
            {
                if (this._EstadoMod != value)
                {
                    this.OnEstadoModChanging(value);
                    this.SendPropertyChanging("EstadoMod");
                    this._EstadoMod = value;
                    this.SendPropertyChanged("EstadoMod");
                    this.OnEstadoModChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModifiedBy in the schema.
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Categoria in the schema.
        /// </summary>
        [Column(Name = @"categoria", Storage = "_Categoria", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Categoria
        {
            get
            {
                return this._Categoria;
            }
            set
            {
                if (this._Categoria != value)
                {
                    this.OnCategoriaChanging(value);
                    this.SendPropertyChanging("Categoria");
                    this._Categoria = value;
                    this.SendPropertyChanged("Categoria");
                    this.OnCategoriaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Precio in the schema.
        /// </summary>
        [Column(Name = @"precio", Storage = "_Precio", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Precio
        {
            get
            {
                return this._Precio;
            }
            set
            {
                if (this._Precio != value)
                {
                    this.OnPrecioChanging(value);
                    this.SendPropertyChanging("Precio");
                    this._Precio = value;
                    this.SendPropertyChanged("Precio");
                    this.OnPrecioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NombreAutor in the schema.
        /// </summary>
        [Column(Name = @"nombre_autor", Storage = "_NombreAutor", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string NombreAutor
        {
            get
            {
                return this._NombreAutor;
            }
            set
            {
                if (this._NombreAutor != value)
                {
                    this.OnNombreAutorChanging(value);
                    this.SendPropertyChanging("NombreAutor");
                    this._NombreAutor = value;
                    this.SendPropertyChanged("NombreAutor");
                    this.OnNombreAutorChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for SpConsultarComentarioResult in the schema.
    /// </summary>
    public partial class SpConsultarComentarioResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private System.Nullable<int> _IdComentario;

        private System.Nullable<int> _IdUsuario;

        private System.Nullable<int> _IdArchivo;

        private string _Comentario;

        private System.Nullable<System.DateTime> _Fecha;

        private System.Nullable<int> _ModifiedBy;

        private string _Usuario;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdComentarioChanging(System.Nullable<int> value);
        partial void OnIdComentarioChanged();
        partial void OnIdUsuarioChanging(System.Nullable<int> value);
        partial void OnIdUsuarioChanged();
        partial void OnIdArchivoChanging(System.Nullable<int> value);
        partial void OnIdArchivoChanged();
        partial void OnComentarioChanging(string value);
        partial void OnComentarioChanged();
        partial void OnFechaChanging(System.Nullable<System.DateTime> value);
        partial void OnFechaChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        partial void OnUsuarioChanging(string value);
        partial void OnUsuarioChanged();
        #endregion

        public SpConsultarComentarioResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdComentario in the schema.
        /// </summary>
        [Column(Name = @"id_comentario", Storage = "_IdComentario", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdComentario
        {
            get
            {
                return this._IdComentario;
            }
            set
            {
                if (this._IdComentario != value)
                {
                    this.OnIdComentarioChanging(value);
                    this.SendPropertyChanging("IdComentario");
                    this._IdComentario = value;
                    this.SendPropertyChanged("IdComentario");
                    this.OnIdComentarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUsuario in the schema.
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdArchivo in the schema.
        /// </summary>
        [Column(Name = @"id_archivo", Storage = "_IdArchivo", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdArchivo
        {
            get
            {
                return this._IdArchivo;
            }
            set
            {
                if (this._IdArchivo != value)
                {
                    this.OnIdArchivoChanging(value);
                    this.SendPropertyChanging("IdArchivo");
                    this._IdArchivo = value;
                    this.SendPropertyChanged("IdArchivo");
                    this.OnIdArchivoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Comentario in the schema.
        /// </summary>
        [Column(Name = @"comentario", Storage = "_Comentario", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Comentario
        {
            get
            {
                return this._Comentario;
            }
            set
            {
                if (this._Comentario != value)
                {
                    this.OnComentarioChanging(value);
                    this.SendPropertyChanging("Comentario");
                    this._Comentario = value;
                    this.SendPropertyChanged("Comentario");
                    this.OnComentarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fecha in the schema.
        /// </summary>
        [Column(Name = @"fecha", Storage = "_Fecha", DbType = "TIMESTAMP", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Fecha
        {
            get
            {
                return this._Fecha;
            }
            set
            {
                if (this._Fecha != value)
                {
                    this.OnFechaChanging(value);
                    this.SendPropertyChanging("Fecha");
                    this._Fecha = value;
                    this.SendPropertyChanged("Fecha");
                    this.OnFechaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModifiedBy in the schema.
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Usuario in the schema.
        /// </summary>
        [Column(Name = @"usuario", Storage = "_Usuario", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Usuario
        {
            get
            {
                return this._Usuario;
            }
            set
            {
                if (this._Usuario != value)
                {
                    this.OnUsuarioChanging(value);
                    this.SendPropertyChanging("Usuario");
                    this._Usuario = value;
                    this.SendPropertyChanged("Usuario");
                    this.OnUsuarioChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for SpVerAutorResult in the schema.
    /// </summary>
    public partial class SpVerAutorResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private System.Nullable<int> _IdAutor;

        private string _Nombre;

        private string _FechaNacimiento;

        private string _FechaMuerte;

        private string _Foto;

        private string _Descripcion;

        private System.Nullable<int> _IdNacionalidad;

        private System.Nullable<int> _ModifiedBy;

        private string _Nacionalidad;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdAutorChanging(System.Nullable<int> value);
        partial void OnIdAutorChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnFechaNacimientoChanging(string value);
        partial void OnFechaNacimientoChanged();
        partial void OnFechaMuerteChanging(string value);
        partial void OnFechaMuerteChanged();
        partial void OnFotoChanging(string value);
        partial void OnFotoChanged();
        partial void OnDescripcionChanging(string value);
        partial void OnDescripcionChanged();
        partial void OnIdNacionalidadChanging(System.Nullable<int> value);
        partial void OnIdNacionalidadChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        partial void OnNacionalidadChanging(string value);
        partial void OnNacionalidadChanged();
        #endregion

        public SpVerAutorResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdAutor in the schema.
        /// </summary>
        [Column(Name = @"id_autor", Storage = "_IdAutor", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdAutor
        {
            get
            {
                return this._IdAutor;
            }
            set
            {
                if (this._IdAutor != value)
                {
                    this.OnIdAutorChanging(value);
                    this.SendPropertyChanging("IdAutor");
                    this._IdAutor = value;
                    this.SendPropertyChanged("IdAutor");
                    this.OnIdAutorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FechaNacimiento in the schema.
        /// </summary>
        [Column(Name = @"fecha_nacimiento", Storage = "_FechaNacimiento", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FechaNacimiento
        {
            get
            {
                return this._FechaNacimiento;
            }
            set
            {
                if (this._FechaNacimiento != value)
                {
                    this.OnFechaNacimientoChanging(value);
                    this.SendPropertyChanging("FechaNacimiento");
                    this._FechaNacimiento = value;
                    this.SendPropertyChanged("FechaNacimiento");
                    this.OnFechaNacimientoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FechaMuerte in the schema.
        /// </summary>
        [Column(Name = @"fecha_muerte", Storage = "_FechaMuerte", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FechaMuerte
        {
            get
            {
                return this._FechaMuerte;
            }
            set
            {
                if (this._FechaMuerte != value)
                {
                    this.OnFechaMuerteChanging(value);
                    this.SendPropertyChanging("FechaMuerte");
                    this._FechaMuerte = value;
                    this.SendPropertyChanged("FechaMuerte");
                    this.OnFechaMuerteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Foto in the schema.
        /// </summary>
        [Column(Name = @"foto", Storage = "_Foto", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Foto
        {
            get
            {
                return this._Foto;
            }
            set
            {
                if (this._Foto != value)
                {
                    this.OnFotoChanging(value);
                    this.SendPropertyChanging("Foto");
                    this._Foto = value;
                    this.SendPropertyChanged("Foto");
                    this.OnFotoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Descripcion in the schema.
        /// </summary>
        [Column(Name = @"descripcion", Storage = "_Descripcion", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Descripcion
        {
            get
            {
                return this._Descripcion;
            }
            set
            {
                if (this._Descripcion != value)
                {
                    this.OnDescripcionChanging(value);
                    this.SendPropertyChanging("Descripcion");
                    this._Descripcion = value;
                    this.SendPropertyChanged("Descripcion");
                    this.OnDescripcionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdNacionalidad in the schema.
        /// </summary>
        [Column(Name = @"id_nacionalidad", Storage = "_IdNacionalidad", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdNacionalidad
        {
            get
            {
                return this._IdNacionalidad;
            }
            set
            {
                if (this._IdNacionalidad != value)
                {
                    this.OnIdNacionalidadChanging(value);
                    this.SendPropertyChanging("IdNacionalidad");
                    this._IdNacionalidad = value;
                    this.SendPropertyChanged("IdNacionalidad");
                    this.OnIdNacionalidadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModifiedBy in the schema.
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nacionalidad in the schema.
        /// </summary>
        [Column(Name = @"nacionalidad", Storage = "_Nacionalidad", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Nacionalidad
        {
            get
            {
                return this._Nacionalidad;
            }
            set
            {
                if (this._Nacionalidad != value)
                {
                    this.OnNacionalidadChanging(value);
                    this.SendPropertyChanging("Nacionalidad");
                    this._Nacionalidad = value;
                    this.SendPropertyChanged("Nacionalidad");
                    this.OnNacionalidadChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for SpVerArchivoAutorResult in the schema.
    /// </summary>
    public partial class SpVerArchivoAutorResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private System.Nullable<int> _IdArchivo;

        private string _NombreArchivo;

        private string _Sinopsis;

        private string _ImagenPortada;

        private string _NombreAutor;

        private System.Nullable<int> _IdEstado;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdArchivoChanging(System.Nullable<int> value);
        partial void OnIdArchivoChanged();
        partial void OnNombreArchivoChanging(string value);
        partial void OnNombreArchivoChanged();
        partial void OnSinopsisChanging(string value);
        partial void OnSinopsisChanged();
        partial void OnImagenPortadaChanging(string value);
        partial void OnImagenPortadaChanged();
        partial void OnNombreAutorChanging(string value);
        partial void OnNombreAutorChanged();
        partial void OnIdEstadoChanging(System.Nullable<int> value);
        partial void OnIdEstadoChanged();
        #endregion

        public SpVerArchivoAutorResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdArchivo in the schema.
        /// </summary>
        [Column(Name = @"id_archivo", Storage = "_IdArchivo", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdArchivo
        {
            get
            {
                return this._IdArchivo;
            }
            set
            {
                if (this._IdArchivo != value)
                {
                    this.OnIdArchivoChanging(value);
                    this.SendPropertyChanging("IdArchivo");
                    this._IdArchivo = value;
                    this.SendPropertyChanged("IdArchivo");
                    this.OnIdArchivoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NombreArchivo in the schema.
        /// </summary>
        [Column(Name = @"nombre_archivo", Storage = "_NombreArchivo", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string NombreArchivo
        {
            get
            {
                return this._NombreArchivo;
            }
            set
            {
                if (this._NombreArchivo != value)
                {
                    this.OnNombreArchivoChanging(value);
                    this.SendPropertyChanging("NombreArchivo");
                    this._NombreArchivo = value;
                    this.SendPropertyChanged("NombreArchivo");
                    this.OnNombreArchivoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sinopsis in the schema.
        /// </summary>
        [Column(Name = @"sinopsis", Storage = "_Sinopsis", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Sinopsis
        {
            get
            {
                return this._Sinopsis;
            }
            set
            {
                if (this._Sinopsis != value)
                {
                    this.OnSinopsisChanging(value);
                    this.SendPropertyChanging("Sinopsis");
                    this._Sinopsis = value;
                    this.SendPropertyChanged("Sinopsis");
                    this.OnSinopsisChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImagenPortada in the schema.
        /// </summary>
        [Column(Name = @"imagen_portada", Storage = "_ImagenPortada", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ImagenPortada
        {
            get
            {
                return this._ImagenPortada;
            }
            set
            {
                if (this._ImagenPortada != value)
                {
                    this.OnImagenPortadaChanging(value);
                    this.SendPropertyChanging("ImagenPortada");
                    this._ImagenPortada = value;
                    this.SendPropertyChanged("ImagenPortada");
                    this.OnImagenPortadaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NombreAutor in the schema.
        /// </summary>
        [Column(Name = @"nombre_autor", Storage = "_NombreAutor", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string NombreAutor
        {
            get
            {
                return this._NombreAutor;
            }
            set
            {
                if (this._NombreAutor != value)
                {
                    this.OnNombreAutorChanging(value);
                    this.SendPropertyChanging("NombreAutor");
                    this._NombreAutor = value;
                    this.SendPropertyChanged("NombreAutor");
                    this.OnNombreAutorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdEstado in the schema.
        /// </summary>
        [Column(Name = @"id_estado", Storage = "_IdEstado", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdEstado
        {
            get
            {
                return this._IdEstado;
            }
            set
            {
                if (this._IdEstado != value)
                {
                    this.OnIdEstadoChanging(value);
                    this.SendPropertyChanging("IdEstado");
                    this._IdEstado = value;
                    this.SendPropertyChanged("IdEstado");
                    this.OnIdEstadoChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for SpReporteArchivoResult in the schema.
    /// </summary>
    public partial class SpReporteArchivoResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private System.Nullable<int> _IdArchivo;

        private string _Nombre;

        private string _Anio;

        private string _Sinopsis;

        private System.Nullable<int> _NumPag;

        private string _ImagenPortada;

        private string _Url;

        private System.Nullable<int> _IdUsuario;

        private System.Nullable<int> _IdEstado;

        private System.Nullable<int> _IdCategoria;

        private string _Tags;

        private System.Nullable<int> _IdModerador;

        private System.Nullable<int> _EstadoMod;

        private System.Nullable<int> _ModifiedBy;

        private string _UserName;

        private string _Categoria;

        private System.Nullable<int> _Precio;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdArchivoChanging(System.Nullable<int> value);
        partial void OnIdArchivoChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnAnioChanging(string value);
        partial void OnAnioChanged();
        partial void OnSinopsisChanging(string value);
        partial void OnSinopsisChanged();
        partial void OnNumPagChanging(System.Nullable<int> value);
        partial void OnNumPagChanged();
        partial void OnImagenPortadaChanging(string value);
        partial void OnImagenPortadaChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnIdUsuarioChanging(System.Nullable<int> value);
        partial void OnIdUsuarioChanged();
        partial void OnIdEstadoChanging(System.Nullable<int> value);
        partial void OnIdEstadoChanged();
        partial void OnIdCategoriaChanging(System.Nullable<int> value);
        partial void OnIdCategoriaChanged();
        partial void OnTagsChanging(string value);
        partial void OnTagsChanged();
        partial void OnIdModeradorChanging(System.Nullable<int> value);
        partial void OnIdModeradorChanged();
        partial void OnEstadoModChanging(System.Nullable<int> value);
        partial void OnEstadoModChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnCategoriaChanging(string value);
        partial void OnCategoriaChanged();
        partial void OnPrecioChanging(System.Nullable<int> value);
        partial void OnPrecioChanged();
        #endregion

        public SpReporteArchivoResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdArchivo in the schema.
        /// </summary>
        [Column(Name = @"id_archivo", Storage = "_IdArchivo", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdArchivo
        {
            get
            {
                return this._IdArchivo;
            }
            set
            {
                if (this._IdArchivo != value)
                {
                    this.OnIdArchivoChanging(value);
                    this.SendPropertyChanging("IdArchivo");
                    this._IdArchivo = value;
                    this.SendPropertyChanged("IdArchivo");
                    this.OnIdArchivoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anio in the schema.
        /// </summary>
        [Column(Name = @"anio", Storage = "_Anio", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Anio
        {
            get
            {
                return this._Anio;
            }
            set
            {
                if (this._Anio != value)
                {
                    this.OnAnioChanging(value);
                    this.SendPropertyChanging("Anio");
                    this._Anio = value;
                    this.SendPropertyChanged("Anio");
                    this.OnAnioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sinopsis in the schema.
        /// </summary>
        [Column(Name = @"sinopsis", Storage = "_Sinopsis", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Sinopsis
        {
            get
            {
                return this._Sinopsis;
            }
            set
            {
                if (this._Sinopsis != value)
                {
                    this.OnSinopsisChanging(value);
                    this.SendPropertyChanging("Sinopsis");
                    this._Sinopsis = value;
                    this.SendPropertyChanged("Sinopsis");
                    this.OnSinopsisChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumPag in the schema.
        /// </summary>
        [Column(Name = @"num_pag", Storage = "_NumPag", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> NumPag
        {
            get
            {
                return this._NumPag;
            }
            set
            {
                if (this._NumPag != value)
                {
                    this.OnNumPagChanging(value);
                    this.SendPropertyChanging("NumPag");
                    this._NumPag = value;
                    this.SendPropertyChanged("NumPag");
                    this.OnNumPagChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImagenPortada in the schema.
        /// </summary>
        [Column(Name = @"imagen_portada", Storage = "_ImagenPortada", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ImagenPortada
        {
            get
            {
                return this._ImagenPortada;
            }
            set
            {
                if (this._ImagenPortada != value)
                {
                    this.OnImagenPortadaChanging(value);
                    this.SendPropertyChanging("ImagenPortada");
                    this._ImagenPortada = value;
                    this.SendPropertyChanged("ImagenPortada");
                    this.OnImagenPortadaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Url in the schema.
        /// </summary>
        [Column(Name = @"url", Storage = "_Url", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging("Url");
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUsuario in the schema.
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdEstado in the schema.
        /// </summary>
        [Column(Name = @"id_estado", Storage = "_IdEstado", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdEstado
        {
            get
            {
                return this._IdEstado;
            }
            set
            {
                if (this._IdEstado != value)
                {
                    this.OnIdEstadoChanging(value);
                    this.SendPropertyChanging("IdEstado");
                    this._IdEstado = value;
                    this.SendPropertyChanged("IdEstado");
                    this.OnIdEstadoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdCategoria in the schema.
        /// </summary>
        [Column(Name = @"id_categoria", Storage = "_IdCategoria", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdCategoria
        {
            get
            {
                return this._IdCategoria;
            }
            set
            {
                if (this._IdCategoria != value)
                {
                    this.OnIdCategoriaChanging(value);
                    this.SendPropertyChanging("IdCategoria");
                    this._IdCategoria = value;
                    this.SendPropertyChanged("IdCategoria");
                    this.OnIdCategoriaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tags in the schema.
        /// </summary>
        [Column(Name = @"tags", Storage = "_Tags", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Tags
        {
            get
            {
                return this._Tags;
            }
            set
            {
                if (this._Tags != value)
                {
                    this.OnTagsChanging(value);
                    this.SendPropertyChanging("Tags");
                    this._Tags = value;
                    this.SendPropertyChanged("Tags");
                    this.OnTagsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdModerador in the schema.
        /// </summary>
        [Column(Name = @"id_moderador", Storage = "_IdModerador", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdModerador
        {
            get
            {
                return this._IdModerador;
            }
            set
            {
                if (this._IdModerador != value)
                {
                    this.OnIdModeradorChanging(value);
                    this.SendPropertyChanging("IdModerador");
                    this._IdModerador = value;
                    this.SendPropertyChanged("IdModerador");
                    this.OnIdModeradorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EstadoMod in the schema.
        /// </summary>
        [Column(Name = @"estado_mod", Storage = "_EstadoMod", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> EstadoMod
        {
            get
            {
                return this._EstadoMod;
            }
            set
            {
                if (this._EstadoMod != value)
                {
                    this.OnEstadoModChanging(value);
                    this.SendPropertyChanging("EstadoMod");
                    this._EstadoMod = value;
                    this.SendPropertyChanged("EstadoMod");
                    this.OnEstadoModChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModifiedBy in the schema.
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Name = @"user_name", Storage = "_UserName", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging("UserName");
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Categoria in the schema.
        /// </summary>
        [Column(Name = @"categoria", Storage = "_Categoria", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Categoria
        {
            get
            {
                return this._Categoria;
            }
            set
            {
                if (this._Categoria != value)
                {
                    this.OnCategoriaChanging(value);
                    this.SendPropertyChanging("Categoria");
                    this._Categoria = value;
                    this.SendPropertyChanged("Categoria");
                    this.OnCategoriaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Precio in the schema.
        /// </summary>
        [Column(Name = @"precio", Storage = "_Precio", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Precio
        {
            get
            {
                return this._Precio;
            }
            set
            {
                if (this._Precio != value)
                {
                    this.OnPrecioChanging(value);
                    this.SendPropertyChanging("Precio");
                    this._Precio = value;
                    this.SendPropertyChanged("Precio");
                    this.OnPrecioChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for SpReporteAutoreResult in the schema.
    /// </summary>
    public partial class SpReporteAutoreResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private System.Nullable<int> _IdAutor;

        private string _Nombre;

        private string _FechaBirth;

        private string _FechaDeath;

        private string _Foto;

        private string _Descripcion;

        private System.Nullable<int> _IdNacionalidad;

        private System.Nullable<int> _ModifiedBy;

        private string _Pais;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdAutorChanging(System.Nullable<int> value);
        partial void OnIdAutorChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnFechaBirthChanging(string value);
        partial void OnFechaBirthChanged();
        partial void OnFechaDeathChanging(string value);
        partial void OnFechaDeathChanged();
        partial void OnFotoChanging(string value);
        partial void OnFotoChanged();
        partial void OnDescripcionChanging(string value);
        partial void OnDescripcionChanged();
        partial void OnIdNacionalidadChanging(System.Nullable<int> value);
        partial void OnIdNacionalidadChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        partial void OnPaisChanging(string value);
        partial void OnPaisChanged();
        #endregion

        public SpReporteAutoreResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdAutor in the schema.
        /// </summary>
        [Column(Name = @"id_autor", Storage = "_IdAutor", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdAutor
        {
            get
            {
                return this._IdAutor;
            }
            set
            {
                if (this._IdAutor != value)
                {
                    this.OnIdAutorChanging(value);
                    this.SendPropertyChanging("IdAutor");
                    this._IdAutor = value;
                    this.SendPropertyChanged("IdAutor");
                    this.OnIdAutorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FechaBirth in the schema.
        /// </summary>
        [Column(Name = @"fecha_birth", Storage = "_FechaBirth", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FechaBirth
        {
            get
            {
                return this._FechaBirth;
            }
            set
            {
                if (this._FechaBirth != value)
                {
                    this.OnFechaBirthChanging(value);
                    this.SendPropertyChanging("FechaBirth");
                    this._FechaBirth = value;
                    this.SendPropertyChanged("FechaBirth");
                    this.OnFechaBirthChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FechaDeath in the schema.
        /// </summary>
        [Column(Name = @"fecha_death", Storage = "_FechaDeath", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string FechaDeath
        {
            get
            {
                return this._FechaDeath;
            }
            set
            {
                if (this._FechaDeath != value)
                {
                    this.OnFechaDeathChanging(value);
                    this.SendPropertyChanging("FechaDeath");
                    this._FechaDeath = value;
                    this.SendPropertyChanged("FechaDeath");
                    this.OnFechaDeathChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Foto in the schema.
        /// </summary>
        [Column(Name = @"foto", Storage = "_Foto", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Foto
        {
            get
            {
                return this._Foto;
            }
            set
            {
                if (this._Foto != value)
                {
                    this.OnFotoChanging(value);
                    this.SendPropertyChanging("Foto");
                    this._Foto = value;
                    this.SendPropertyChanged("Foto");
                    this.OnFotoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Descripcion in the schema.
        /// </summary>
        [Column(Name = @"descripcion", Storage = "_Descripcion", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Descripcion
        {
            get
            {
                return this._Descripcion;
            }
            set
            {
                if (this._Descripcion != value)
                {
                    this.OnDescripcionChanging(value);
                    this.SendPropertyChanging("Descripcion");
                    this._Descripcion = value;
                    this.SendPropertyChanged("Descripcion");
                    this.OnDescripcionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdNacionalidad in the schema.
        /// </summary>
        [Column(Name = @"id_nacionalidad", Storage = "_IdNacionalidad", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdNacionalidad
        {
            get
            {
                return this._IdNacionalidad;
            }
            set
            {
                if (this._IdNacionalidad != value)
                {
                    this.OnIdNacionalidadChanging(value);
                    this.SendPropertyChanging("IdNacionalidad");
                    this._IdNacionalidad = value;
                    this.SendPropertyChanged("IdNacionalidad");
                    this.OnIdNacionalidadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModifiedBy in the schema.
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pais in the schema.
        /// </summary>
        [Column(Name = @"pais", Storage = "_Pais", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Pais
        {
            get
            {
                return this._Pais;
            }
            set
            {
                if (this._Pais != value)
                {
                    this.OnPaisChanging(value);
                    this.SendPropertyChanging("Pais");
                    this._Pais = value;
                    this.SendPropertyChanged("Pais");
                    this.OnPaisChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for SpConsultaArchivoDatoResult in the schema.
    /// </summary>
    public partial class SpConsultaArchivoDatoResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private System.Nullable<int> _IdArchivo;

        private string _Nombre;

        private string _Sinopsis;

        private string _ImagenPortada;

        private string _Url;

        private System.Nullable<int> _IdUsuario;

        private System.Nullable<int> _IdEstado;

        private System.Nullable<int> _IdCategoria;

        private string _Tags;

        private string _Categoria;

        private string _Usuario;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdArchivoChanging(System.Nullable<int> value);
        partial void OnIdArchivoChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnSinopsisChanging(string value);
        partial void OnSinopsisChanged();
        partial void OnImagenPortadaChanging(string value);
        partial void OnImagenPortadaChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnIdUsuarioChanging(System.Nullable<int> value);
        partial void OnIdUsuarioChanged();
        partial void OnIdEstadoChanging(System.Nullable<int> value);
        partial void OnIdEstadoChanged();
        partial void OnIdCategoriaChanging(System.Nullable<int> value);
        partial void OnIdCategoriaChanged();
        partial void OnTagsChanging(string value);
        partial void OnTagsChanged();
        partial void OnCategoriaChanging(string value);
        partial void OnCategoriaChanged();
        partial void OnUsuarioChanging(string value);
        partial void OnUsuarioChanged();
        #endregion

        public SpConsultaArchivoDatoResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdArchivo in the schema.
        /// </summary>
        [Column(Name = @"id_archivo", Storage = "_IdArchivo", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdArchivo
        {
            get
            {
                return this._IdArchivo;
            }
            set
            {
                if (this._IdArchivo != value)
                {
                    this.OnIdArchivoChanging(value);
                    this.SendPropertyChanging("IdArchivo");
                    this._IdArchivo = value;
                    this.SendPropertyChanged("IdArchivo");
                    this.OnIdArchivoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sinopsis in the schema.
        /// </summary>
        [Column(Name = @"sinopsis", Storage = "_Sinopsis", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Sinopsis
        {
            get
            {
                return this._Sinopsis;
            }
            set
            {
                if (this._Sinopsis != value)
                {
                    this.OnSinopsisChanging(value);
                    this.SendPropertyChanging("Sinopsis");
                    this._Sinopsis = value;
                    this.SendPropertyChanged("Sinopsis");
                    this.OnSinopsisChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImagenPortada in the schema.
        /// </summary>
        [Column(Name = @"imagen_portada", Storage = "_ImagenPortada", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ImagenPortada
        {
            get
            {
                return this._ImagenPortada;
            }
            set
            {
                if (this._ImagenPortada != value)
                {
                    this.OnImagenPortadaChanging(value);
                    this.SendPropertyChanging("ImagenPortada");
                    this._ImagenPortada = value;
                    this.SendPropertyChanged("ImagenPortada");
                    this.OnImagenPortadaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Url in the schema.
        /// </summary>
        [Column(Name = @"url", Storage = "_Url", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging("Url");
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUsuario in the schema.
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdEstado in the schema.
        /// </summary>
        [Column(Name = @"id_estado", Storage = "_IdEstado", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdEstado
        {
            get
            {
                return this._IdEstado;
            }
            set
            {
                if (this._IdEstado != value)
                {
                    this.OnIdEstadoChanging(value);
                    this.SendPropertyChanging("IdEstado");
                    this._IdEstado = value;
                    this.SendPropertyChanged("IdEstado");
                    this.OnIdEstadoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdCategoria in the schema.
        /// </summary>
        [Column(Name = @"id_categoria", Storage = "_IdCategoria", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdCategoria
        {
            get
            {
                return this._IdCategoria;
            }
            set
            {
                if (this._IdCategoria != value)
                {
                    this.OnIdCategoriaChanging(value);
                    this.SendPropertyChanging("IdCategoria");
                    this._IdCategoria = value;
                    this.SendPropertyChanged("IdCategoria");
                    this.OnIdCategoriaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tags in the schema.
        /// </summary>
        [Column(Name = @"tags", Storage = "_Tags", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Tags
        {
            get
            {
                return this._Tags;
            }
            set
            {
                if (this._Tags != value)
                {
                    this.OnTagsChanging(value);
                    this.SendPropertyChanging("Tags");
                    this._Tags = value;
                    this.SendPropertyChanged("Tags");
                    this.OnTagsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Categoria in the schema.
        /// </summary>
        [Column(Name = @"categoria", Storage = "_Categoria", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Categoria
        {
            get
            {
                return this._Categoria;
            }
            set
            {
                if (this._Categoria != value)
                {
                    this.OnCategoriaChanging(value);
                    this.SendPropertyChanging("Categoria");
                    this._Categoria = value;
                    this.SendPropertyChanged("Categoria");
                    this.OnCategoriaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Usuario in the schema.
        /// </summary>
        [Column(Name = @"usuario", Storage = "_Usuario", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Usuario
        {
            get
            {
                return this._Usuario;
            }
            set
            {
                if (this._Usuario != value)
                {
                    this.OnUsuarioChanging(value);
                    this.SendPropertyChanging("Usuario");
                    this._Usuario = value;
                    this.SendPropertyChanged("Usuario");
                    this.OnUsuarioChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for SpConsultarArchivoResult in the schema.
    /// </summary>
    public partial class SpConsultarArchivoResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private System.Nullable<int> _IdArchivo;

        private string _Nombre;

        private string _Anio;

        private string _Sinopsis;

        private System.Nullable<int> _NumPag;

        private string _ImagenPortada;

        private string _Url;

        private System.Nullable<int> _IdUsuario;

        private System.Nullable<int> _IdEstado;

        private System.Nullable<int> _IdCategoria;

        private string _Tags;

        private System.Nullable<int> _IdModerador;

        private System.Nullable<int> _EstadoMod;

        private System.Nullable<int> _ModifiedBy;

        private string _Categoria;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdArchivoChanging(System.Nullable<int> value);
        partial void OnIdArchivoChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnAnioChanging(string value);
        partial void OnAnioChanged();
        partial void OnSinopsisChanging(string value);
        partial void OnSinopsisChanged();
        partial void OnNumPagChanging(System.Nullable<int> value);
        partial void OnNumPagChanged();
        partial void OnImagenPortadaChanging(string value);
        partial void OnImagenPortadaChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnIdUsuarioChanging(System.Nullable<int> value);
        partial void OnIdUsuarioChanged();
        partial void OnIdEstadoChanging(System.Nullable<int> value);
        partial void OnIdEstadoChanged();
        partial void OnIdCategoriaChanging(System.Nullable<int> value);
        partial void OnIdCategoriaChanged();
        partial void OnTagsChanging(string value);
        partial void OnTagsChanged();
        partial void OnIdModeradorChanging(System.Nullable<int> value);
        partial void OnIdModeradorChanged();
        partial void OnEstadoModChanging(System.Nullable<int> value);
        partial void OnEstadoModChanged();
        partial void OnModifiedByChanging(System.Nullable<int> value);
        partial void OnModifiedByChanged();
        partial void OnCategoriaChanging(string value);
        partial void OnCategoriaChanged();
        #endregion

        public SpConsultarArchivoResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdArchivo in the schema.
        /// </summary>
        [Column(Name = @"id_archivo", Storage = "_IdArchivo", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdArchivo
        {
            get
            {
                return this._IdArchivo;
            }
            set
            {
                if (this._IdArchivo != value)
                {
                    this.OnIdArchivoChanging(value);
                    this.SendPropertyChanging("IdArchivo");
                    this._IdArchivo = value;
                    this.SendPropertyChanged("IdArchivo");
                    this.OnIdArchivoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anio in the schema.
        /// </summary>
        [Column(Name = @"anio", Storage = "_Anio", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Anio
        {
            get
            {
                return this._Anio;
            }
            set
            {
                if (this._Anio != value)
                {
                    this.OnAnioChanging(value);
                    this.SendPropertyChanging("Anio");
                    this._Anio = value;
                    this.SendPropertyChanged("Anio");
                    this.OnAnioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sinopsis in the schema.
        /// </summary>
        [Column(Name = @"sinopsis", Storage = "_Sinopsis", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Sinopsis
        {
            get
            {
                return this._Sinopsis;
            }
            set
            {
                if (this._Sinopsis != value)
                {
                    this.OnSinopsisChanging(value);
                    this.SendPropertyChanging("Sinopsis");
                    this._Sinopsis = value;
                    this.SendPropertyChanged("Sinopsis");
                    this.OnSinopsisChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumPag in the schema.
        /// </summary>
        [Column(Name = @"num_pag", Storage = "_NumPag", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> NumPag
        {
            get
            {
                return this._NumPag;
            }
            set
            {
                if (this._NumPag != value)
                {
                    this.OnNumPagChanging(value);
                    this.SendPropertyChanging("NumPag");
                    this._NumPag = value;
                    this.SendPropertyChanged("NumPag");
                    this.OnNumPagChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImagenPortada in the schema.
        /// </summary>
        [Column(Name = @"imagen_portada", Storage = "_ImagenPortada", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ImagenPortada
        {
            get
            {
                return this._ImagenPortada;
            }
            set
            {
                if (this._ImagenPortada != value)
                {
                    this.OnImagenPortadaChanging(value);
                    this.SendPropertyChanging("ImagenPortada");
                    this._ImagenPortada = value;
                    this.SendPropertyChanged("ImagenPortada");
                    this.OnImagenPortadaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Url in the schema.
        /// </summary>
        [Column(Name = @"url", Storage = "_Url", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging("Url");
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUsuario in the schema.
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdEstado in the schema.
        /// </summary>
        [Column(Name = @"id_estado", Storage = "_IdEstado", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdEstado
        {
            get
            {
                return this._IdEstado;
            }
            set
            {
                if (this._IdEstado != value)
                {
                    this.OnIdEstadoChanging(value);
                    this.SendPropertyChanging("IdEstado");
                    this._IdEstado = value;
                    this.SendPropertyChanged("IdEstado");
                    this.OnIdEstadoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdCategoria in the schema.
        /// </summary>
        [Column(Name = @"id_categoria", Storage = "_IdCategoria", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdCategoria
        {
            get
            {
                return this._IdCategoria;
            }
            set
            {
                if (this._IdCategoria != value)
                {
                    this.OnIdCategoriaChanging(value);
                    this.SendPropertyChanging("IdCategoria");
                    this._IdCategoria = value;
                    this.SendPropertyChanged("IdCategoria");
                    this.OnIdCategoriaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tags in the schema.
        /// </summary>
        [Column(Name = @"tags", Storage = "_Tags", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Tags
        {
            get
            {
                return this._Tags;
            }
            set
            {
                if (this._Tags != value)
                {
                    this.OnTagsChanging(value);
                    this.SendPropertyChanging("Tags");
                    this._Tags = value;
                    this.SendPropertyChanged("Tags");
                    this.OnTagsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdModerador in the schema.
        /// </summary>
        [Column(Name = @"id_moderador", Storage = "_IdModerador", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdModerador
        {
            get
            {
                return this._IdModerador;
            }
            set
            {
                if (this._IdModerador != value)
                {
                    this.OnIdModeradorChanging(value);
                    this.SendPropertyChanging("IdModerador");
                    this._IdModerador = value;
                    this.SendPropertyChanged("IdModerador");
                    this.OnIdModeradorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EstadoMod in the schema.
        /// </summary>
        [Column(Name = @"estado_mod", Storage = "_EstadoMod", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> EstadoMod
        {
            get
            {
                return this._EstadoMod;
            }
            set
            {
                if (this._EstadoMod != value)
                {
                    this.OnEstadoModChanging(value);
                    this.SendPropertyChanging("EstadoMod");
                    this._EstadoMod = value;
                    this.SendPropertyChanged("EstadoMod");
                    this.OnEstadoModChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModifiedBy in the schema.
        /// </summary>
        [Column(Name = @"modified_by", Storage = "_ModifiedBy", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging("ModifiedBy");
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Categoria in the schema.
        /// </summary>
        [Column(Name = @"categoria", Storage = "_Categoria", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Categoria
        {
            get
            {
                return this._Categoria;
            }
            set
            {
                if (this._Categoria != value)
                {
                    this.OnCategoriaChanging(value);
                    this.SendPropertyChanging("Categoria");
                    this._Categoria = value;
                    this.SendPropertyChanged("Categoria");
                    this.OnCategoriaChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
