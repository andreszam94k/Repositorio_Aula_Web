//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 07/10/2017 8:58:27
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace AulaWebContext_idioma
{

    [DatabaseAttribute(Name = "Aula_Web")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class AulaWebDataContext_idioma : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(AulaWebDataContext_idioma));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertFormulario(Formulario instance);
        partial void UpdateFormulario(Formulario instance);
        partial void DeleteFormulario(Formulario instance);
        partial void InsertIdioma(Idioma instance);
        partial void UpdateIdioma(Idioma instance);
        partial void DeleteIdioma(Idioma instance);
        partial void InsertControlFormulario(ControlFormulario instance);
        partial void UpdateControlFormulario(ControlFormulario instance);
        partial void DeleteControlFormulario(ControlFormulario instance);
        partial void InsertControlIdioma(ControlIdioma instance);
        partial void UpdateControlIdioma(ControlIdioma instance);
        partial void DeleteControlIdioma(ControlIdioma instance);

        #endregion

        public AulaWebDataContext_idioma() :
        base(GetConnectionString("AulaWebDataContextConnectionString_idioma"), mappingSource)
        {
            OnCreated();
        }

        public AulaWebDataContext_idioma(MappingSource mappingSource) :
        base(GetConnectionString("AulaWebDataContextConnectionString_idioma"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public AulaWebDataContext_idioma(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public AulaWebDataContext_idioma(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public AulaWebDataContext_idioma(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public AulaWebDataContext_idioma(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Formulario> Formularios
        {
            get
            {
                return this.GetTable<Formulario>();
            }
        }

        public Devart.Data.Linq.Table<Idioma> Idiomas
        {
            get
            {
                return this.GetTable<Idioma>();
            }
        }

        public Devart.Data.Linq.Table<ControlFormulario> ControlFormularios
        {
            get
            {
                return this.GetTable<ControlFormulario>();
            }
        }

        public Devart.Data.Linq.Table<ControlIdioma> ControlIdiomas
        {
            get
            {
                return this.GetTable<ControlIdioma>();
            }
        }

    
        /// <summary>
        /// Funcion que retorna los texto de cada componente dependiendo el idioma y el formulario
        /// </summary>
        [Function(Name=@"multi_idioma.sp_consultar_idioma", IsComposable=true)]
        public System.Linq.IQueryable<SpConsultarIdiomaResult> SpConsultarIdioma([Parameter(Name="_idioma", DbType="BIGINT")] System.Nullable<long> _idioma, [Parameter(Name="_formulario", DbType="BIGINT")] System.Nullable<long> _formulario)
        {
            return this.CreateMethodCallQuery<SpConsultarIdiomaResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), _idioma, _formulario);
        }
    }
}

namespace AulaWebContext_idioma
{

    /// <summary>
    /// Tabla que guarda los formularios que posee la aplicacion
    /// </summary>
    [Table(Name = @"multi_idioma.formularios")]
    public partial class Formulario : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdFormulario;

        private string _Nombre;
        #pragma warning restore 0649

        private EntitySet<ControlFormulario> _ControlFormularios;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdFormularioChanging(long value);
        partial void OnIdFormularioChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        #endregion

        public Formulario()
        {
            this._ControlFormularios = new EntitySet<ControlFormulario>(new Action<ControlFormulario>(this.attach_ControlFormularios), new Action<ControlFormulario>(this.detach_ControlFormularios));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdFormulario in the schema.
        /// </summary>
        [Column(Name = @"id_formulario", Storage = "_IdFormulario", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGSERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long IdFormulario
        {
            get
            {
                return this._IdFormulario;
            }
            set
            {
                if (this._IdFormulario != value)
                {
                    this.OnIdFormularioChanging(value);
                    this.SendPropertyChanging("IdFormulario");
                    this._IdFormulario = value;
                    this.SendPropertyChanged("IdFormulario");
                    this.OnIdFormularioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControlFormularios in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Formulario_ControlFormulario", Storage="_ControlFormularios", ThisKey="IdFormulario", OtherKey="IdFormulario", DeleteRule="CASCADE")]
        public EntitySet<ControlFormulario> ControlFormularios
        {
            get
            {
                return this._ControlFormularios;
            }
            set
            {
                this._ControlFormularios.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ControlFormularios(ControlFormulario entity)
        {
            this.SendPropertyChanging("ControlFormularios");
            entity.Formulario = this;
        }
    
        private void detach_ControlFormularios(ControlFormulario entity)
        {
            this.SendPropertyChanging("ControlFormularios");
            entity.Formulario = null;
        }
    }

    /// <summary>
    /// Tabla que guarda lo idiomas que posee la plataforma
    /// </summary>
    [Table(Name = @"multi_idioma.idiomas")]
    public partial class Idioma : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdIdiomas;

        private string _Nombre;

        private string _Terminacion;
        #pragma warning restore 0649

        private EntitySet<ControlIdioma> _ControlIdiomas;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdIdiomasChanging(long value);
        partial void OnIdIdiomasChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnTerminacionChanging(string value);
        partial void OnTerminacionChanged();
        #endregion

        public Idioma()
        {
            this._ControlIdiomas = new EntitySet<ControlIdioma>(new Action<ControlIdioma>(this.attach_ControlIdiomas), new Action<ControlIdioma>(this.detach_ControlIdiomas));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdIdiomas in the schema.
        /// </summary>
        [Column(Name = @"id_idiomas", Storage = "_IdIdiomas", CanBeNull = false, DbType = "INT8 NOT NULL", IsPrimaryKey = true)]
        public long IdIdiomas
        {
            get
            {
                return this._IdIdiomas;
            }
            set
            {
                if (this._IdIdiomas != value)
                {
                    this.OnIdIdiomasChanging(value);
                    this.SendPropertyChanging("IdIdiomas");
                    this._IdIdiomas = value;
                    this.SendPropertyChanged("IdIdiomas");
                    this.OnIdIdiomasChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Terminacion in the schema.
        /// </summary>
        [Column(Name = @"terminacion", Storage = "_Terminacion", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Terminacion
        {
            get
            {
                return this._Terminacion;
            }
            set
            {
                if (this._Terminacion != value)
                {
                    this.OnTerminacionChanging(value);
                    this.SendPropertyChanging("Terminacion");
                    this._Terminacion = value;
                    this.SendPropertyChanged("Terminacion");
                    this.OnTerminacionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControlIdiomas in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Idioma_ControlIdioma", Storage="_ControlIdiomas", ThisKey="IdIdiomas", OtherKey="IdIdioma", DeleteRule="NO ACTION")]
        public EntitySet<ControlIdioma> ControlIdiomas
        {
            get
            {
                return this._ControlIdiomas;
            }
            set
            {
                this._ControlIdiomas.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ControlIdiomas(ControlIdioma entity)
        {
            this.SendPropertyChanging("ControlIdiomas");
            entity.Idioma = this;
        }
    
        private void detach_ControlIdiomas(ControlIdioma entity)
        {
            this.SendPropertyChanging("ControlIdiomas");
            entity.Idioma = null;
        }
    }

    /// <summary>
    /// Tabla que guarda todos los componentes que posee el formulario.
    /// </summary>
    [Table(Name = @"multi_idioma.control_formulario")]
    public partial class ControlFormulario : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdControlFormualario;

        private long _IdFormulario;

        private string _Componente;
        #pragma warning restore 0649

        private EntityRef<Formulario> _Formulario;

        private EntitySet<ControlIdioma> _ControlIdiomas;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdControlFormualarioChanging(long value);
        partial void OnIdControlFormualarioChanged();
        partial void OnIdFormularioChanging(long value);
        partial void OnIdFormularioChanged();
        partial void OnComponenteChanging(string value);
        partial void OnComponenteChanged();
        #endregion

        public ControlFormulario()
        {
            this._Formulario  = default(EntityRef<Formulario>);
            this._ControlIdiomas = new EntitySet<ControlIdioma>(new Action<ControlIdioma>(this.attach_ControlIdiomas), new Action<ControlIdioma>(this.detach_ControlIdiomas));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdControlFormualario in the schema.
        /// </summary>
        [Column(Name = @"id_control_formualario", Storage = "_IdControlFormualario", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGSERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long IdControlFormualario
        {
            get
            {
                return this._IdControlFormualario;
            }
            set
            {
                if (this._IdControlFormualario != value)
                {
                    this.OnIdControlFormualarioChanging(value);
                    this.SendPropertyChanging("IdControlFormualario");
                    this._IdControlFormualario = value;
                    this.SendPropertyChanged("IdControlFormualario");
                    this.OnIdControlFormualarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdFormulario in the schema.
        /// </summary>
        [Column(Name = @"id_formulario", Storage = "_IdFormulario", CanBeNull = false, DbType = "INT8 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdFormulario
        {
            get
            {
                return this._IdFormulario;
            }
            set
            {
                if (this._IdFormulario != value)
                {
                    if (this._Formulario.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdFormularioChanging(value);
                    this.SendPropertyChanging("IdFormulario");
                    this._IdFormulario = value;
                    this.SendPropertyChanged("IdFormulario");
                    this.OnIdFormularioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Componente in the schema.
        /// </summary>
        [Column(Name = @"componente", Storage = "_Componente", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Componente
        {
            get
            {
                return this._Componente;
            }
            set
            {
                if (this._Componente != value)
                {
                    this.OnComponenteChanging(value);
                    this.SendPropertyChanging("Componente");
                    this._Componente = value;
                    this.SendPropertyChanged("Componente");
                    this.OnComponenteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Formulario in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Formulario_ControlFormulario", Storage="_Formulario", ThisKey="IdFormulario", OtherKey="IdFormulario", IsForeignKey=true)]
        public Formulario Formulario
        {
            get
            {
                return this._Formulario.Entity;
            }
            set
            {
                Formulario previousValue = this._Formulario.Entity;
                if ((previousValue != value) || (this._Formulario.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Formulario");
                    if (previousValue != null)
                    {
                        this._Formulario.Entity = null;
                        previousValue.ControlFormularios.Remove(this);
                    }
                    this._Formulario.Entity = value;
                    if (value != null)
                    {
                        this._IdFormulario = value.IdFormulario;
                        value.ControlFormularios.Add(this);
                    }
                    else
                    {
                        this._IdFormulario = default(long);
                    }
                    this.SendPropertyChanged("Formulario");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControlIdiomas in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ControlFormulario_ControlIdioma", Storage="_ControlIdiomas", ThisKey="IdControlFormualario", OtherKey="IdControl", DeleteRule="CASCADE")]
        public EntitySet<ControlIdioma> ControlIdiomas
        {
            get
            {
                return this._ControlIdiomas;
            }
            set
            {
                this._ControlIdiomas.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ControlIdiomas(ControlIdioma entity)
        {
            this.SendPropertyChanging("ControlIdiomas");
            entity.ControlFormulario = this;
        }
    
        private void detach_ControlIdiomas(ControlIdioma entity)
        {
            this.SendPropertyChanging("ControlIdiomas");
            entity.ControlFormulario = null;
        }
    }

    /// <summary>
    /// Tabla que guarda el texto del componente, dependiendo idioma y formulario
    /// </summary>
    [Table(Name = @"multi_idioma.control_idioma")]
    public partial class ControlIdioma : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdControlIdioma;

        private long _IdControl;

        private long _IdIdioma;

        private string _Texto;
        #pragma warning restore 0649

        private EntityRef<ControlFormulario> _ControlFormulario;

        private EntityRef<Idioma> _Idioma;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdControlIdiomaChanging(long value);
        partial void OnIdControlIdiomaChanged();
        partial void OnIdControlChanging(long value);
        partial void OnIdControlChanged();
        partial void OnIdIdiomaChanging(long value);
        partial void OnIdIdiomaChanged();
        partial void OnTextoChanging(string value);
        partial void OnTextoChanged();
        #endregion

        public ControlIdioma()
        {
            this._ControlFormulario  = default(EntityRef<ControlFormulario>);
            this._Idioma  = default(EntityRef<Idioma>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdControlIdioma in the schema.
        /// </summary>
        [Column(Name = @"id_control_idioma", Storage = "_IdControlIdioma", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGSERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long IdControlIdioma
        {
            get
            {
                return this._IdControlIdioma;
            }
            set
            {
                if (this._IdControlIdioma != value)
                {
                    this.OnIdControlIdiomaChanging(value);
                    this.SendPropertyChanging("IdControlIdioma");
                    this._IdControlIdioma = value;
                    this.SendPropertyChanged("IdControlIdioma");
                    this.OnIdControlIdiomaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdControl in the schema.
        /// </summary>
        [Column(Name = @"id_control", Storage = "_IdControl", CanBeNull = false, DbType = "INT8 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdControl
        {
            get
            {
                return this._IdControl;
            }
            set
            {
                if (this._IdControl != value)
                {
                    if (this._ControlFormulario.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdControlChanging(value);
                    this.SendPropertyChanging("IdControl");
                    this._IdControl = value;
                    this.SendPropertyChanged("IdControl");
                    this.OnIdControlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdIdioma in the schema.
        /// </summary>
        [Column(Name = @"id_idioma", Storage = "_IdIdioma", CanBeNull = false, DbType = "INT8 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdIdioma
        {
            get
            {
                return this._IdIdioma;
            }
            set
            {
                if (this._IdIdioma != value)
                {
                    if (this._Idioma.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdIdiomaChanging(value);
                    this.SendPropertyChanging("IdIdioma");
                    this._IdIdioma = value;
                    this.SendPropertyChanged("IdIdioma");
                    this.OnIdIdiomaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Texto in the schema.
        /// </summary>
        [Column(Name = @"texto", Storage = "_Texto", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Texto
        {
            get
            {
                return this._Texto;
            }
            set
            {
                if (this._Texto != value)
                {
                    this.OnTextoChanging(value);
                    this.SendPropertyChanging("Texto");
                    this._Texto = value;
                    this.SendPropertyChanged("Texto");
                    this.OnTextoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControlFormulario in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ControlFormulario_ControlIdioma", Storage="_ControlFormulario", ThisKey="IdControl", OtherKey="IdControlFormualario", IsForeignKey=true)]
        public ControlFormulario ControlFormulario
        {
            get
            {
                return this._ControlFormulario.Entity;
            }
            set
            {
                ControlFormulario previousValue = this._ControlFormulario.Entity;
                if ((previousValue != value) || (this._ControlFormulario.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ControlFormulario");
                    if (previousValue != null)
                    {
                        this._ControlFormulario.Entity = null;
                        previousValue.ControlIdiomas.Remove(this);
                    }
                    this._ControlFormulario.Entity = value;
                    if (value != null)
                    {
                        this._IdControl = value.IdControlFormualario;
                        value.ControlIdiomas.Add(this);
                    }
                    else
                    {
                        this._IdControl = default(long);
                    }
                    this.SendPropertyChanged("ControlFormulario");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Idioma in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Idioma_ControlIdioma", Storage="_Idioma", ThisKey="IdIdioma", OtherKey="IdIdiomas", IsForeignKey=true)]
        public Idioma Idioma
        {
            get
            {
                return this._Idioma.Entity;
            }
            set
            {
                Idioma previousValue = this._Idioma.Entity;
                if ((previousValue != value) || (this._Idioma.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Idioma");
                    if (previousValue != null)
                    {
                        this._Idioma.Entity = null;
                        previousValue.ControlIdiomas.Remove(this);
                    }
                    this._Idioma.Entity = value;
                    if (value != null)
                    {
                        this._IdIdioma = value.IdIdiomas;
                        value.ControlIdiomas.Add(this);
                    }
                    else
                    {
                        this._IdIdioma = default(long);
                    }
                    this.SendPropertyChanged("Idioma");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}

namespace AulaWebContext_idioma
{

    /// <summary>
    /// There are no comments for SpConsultarIdiomaResult in the schema.
    /// </summary>
    public partial class SpConsultarIdiomaResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private System.Nullable<long> _IdControlIdioma;

        private System.Nullable<int> _IdControl;

        private System.Nullable<int> _IdIdioma;

        private string _Texto;

        private System.Nullable<long> _IdControlFormualario;

        private System.Nullable<int> _IdFormulario;

        private string _Componente;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdControlIdiomaChanging(System.Nullable<long> value);
        partial void OnIdControlIdiomaChanged();
        partial void OnIdControlChanging(System.Nullable<int> value);
        partial void OnIdControlChanged();
        partial void OnIdIdiomaChanging(System.Nullable<int> value);
        partial void OnIdIdiomaChanged();
        partial void OnTextoChanging(string value);
        partial void OnTextoChanged();
        partial void OnIdControlFormualarioChanging(System.Nullable<long> value);
        partial void OnIdControlFormualarioChanged();
        partial void OnIdFormularioChanging(System.Nullable<int> value);
        partial void OnIdFormularioChanged();
        partial void OnComponenteChanging(string value);
        partial void OnComponenteChanged();
        #endregion

        public SpConsultarIdiomaResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdControlIdioma in the schema.
        /// </summary>
        [Column(Name = @"id_control_idioma", Storage = "_IdControlIdioma", DbType = "BIGINT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IdControlIdioma
        {
            get
            {
                return this._IdControlIdioma;
            }
            set
            {
                if (this._IdControlIdioma != value)
                {
                    this.OnIdControlIdiomaChanging(value);
                    this.SendPropertyChanging("IdControlIdioma");
                    this._IdControlIdioma = value;
                    this.SendPropertyChanged("IdControlIdioma");
                    this.OnIdControlIdiomaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdControl in the schema.
        /// </summary>
        [Column(Name = @"id_control", Storage = "_IdControl", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdControl
        {
            get
            {
                return this._IdControl;
            }
            set
            {
                if (this._IdControl != value)
                {
                    this.OnIdControlChanging(value);
                    this.SendPropertyChanging("IdControl");
                    this._IdControl = value;
                    this.SendPropertyChanged("IdControl");
                    this.OnIdControlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdIdioma in the schema.
        /// </summary>
        [Column(Name = @"id_idioma", Storage = "_IdIdioma", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdIdioma
        {
            get
            {
                return this._IdIdioma;
            }
            set
            {
                if (this._IdIdioma != value)
                {
                    this.OnIdIdiomaChanging(value);
                    this.SendPropertyChanging("IdIdioma");
                    this._IdIdioma = value;
                    this.SendPropertyChanged("IdIdioma");
                    this.OnIdIdiomaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Texto in the schema.
        /// </summary>
        [Column(Name = @"texto", Storage = "_Texto", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Texto
        {
            get
            {
                return this._Texto;
            }
            set
            {
                if (this._Texto != value)
                {
                    this.OnTextoChanging(value);
                    this.SendPropertyChanging("Texto");
                    this._Texto = value;
                    this.SendPropertyChanged("Texto");
                    this.OnTextoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdControlFormualario in the schema.
        /// </summary>
        [Column(Name = @"id_control_formualario", Storage = "_IdControlFormualario", DbType = "BIGINT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IdControlFormualario
        {
            get
            {
                return this._IdControlFormualario;
            }
            set
            {
                if (this._IdControlFormualario != value)
                {
                    this.OnIdControlFormualarioChanging(value);
                    this.SendPropertyChanging("IdControlFormualario");
                    this._IdControlFormualario = value;
                    this.SendPropertyChanged("IdControlFormualario");
                    this.OnIdControlFormualarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdFormulario in the schema.
        /// </summary>
        [Column(Name = @"id_formulario", Storage = "_IdFormulario", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdFormulario
        {
            get
            {
                return this._IdFormulario;
            }
            set
            {
                if (this._IdFormulario != value)
                {
                    this.OnIdFormularioChanging(value);
                    this.SendPropertyChanging("IdFormulario");
                    this._IdFormulario = value;
                    this.SendPropertyChanged("IdFormulario");
                    this.OnIdFormularioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Componente in the schema.
        /// </summary>
        [Column(Name = @"componente", Storage = "_Componente", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Componente
        {
            get
            {
                return this._Componente;
            }
            set
            {
                if (this._Componente != value)
                {
                    this.OnComponenteChanging(value);
                    this.SendPropertyChanging("Componente");
                    this._Componente = value;
                    this.SendPropertyChanged("Componente");
                    this.OnComponenteChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
